{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-31T10:20:14.667966Z","iopub.execute_input":"2024-08-31T10:20:14.668461Z","iopub.status.idle":"2024-08-31T10:20:15.209500Z","shell.execute_reply.started":"2024-08-31T10:20:14.668403Z","shell.execute_reply":"2024-08-31T10:20:15.208217Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/sentiment-analysis-on-movie-reviews/sampleSubmission.csv\n/kaggle/input/sentiment-analysis-on-movie-reviews/train.tsv.zip\n/kaggle/input/sentiment-analysis-on-movie-reviews/test.tsv.zip\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**VANDER**","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('ggplot')\n\nimport nltk","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:20:15.211483Z","iopub.execute_input":"2024-08-31T10:20:15.212032Z","iopub.status.idle":"2024-08-31T10:20:18.733240Z","shell.execute_reply.started":"2024-08-31T10:20:15.211987Z","shell.execute_reply":"2024-08-31T10:20:18.731730Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"# Read in data\n# Read the .tsv file inside the .zip directly\ndf = pd.read_csv('/kaggle/input/sentiment-analysis-on-movie-reviews/train.tsv.zip', \n                 compression='zip', \n                 delimiter='\\t')\n\n# Print the first few rows of the DataFrame\nprint(df.head())","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:20:18.735303Z","iopub.execute_input":"2024-08-31T10:20:18.735923Z","iopub.status.idle":"2024-08-31T10:20:19.078881Z","shell.execute_reply.started":"2024-08-31T10:20:18.735876Z","shell.execute_reply":"2024-08-31T10:20:19.077206Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"   PhraseId  SentenceId                                             Phrase  \\\n0         1           1  A series of escapades demonstrating the adage ...   \n1         2           1  A series of escapades demonstrating the adage ...   \n2         3           1                                           A series   \n3         4           1                                                  A   \n4         5           1                                             series   \n\n   Sentiment  \n0          1  \n1          2  \n2          2  \n3          2  \n4          2  \n","output_type":"stream"}]},{"cell_type":"markdown","source":"**EDA**","metadata":{}},{"cell_type":"code","source":"ax = df['Sentiment'].value_counts().sort_index() \\\n    .plot(kind='bar',\n          title='Sentiment',\n          figsize=(10, 5))\nax.set_xlabel('Review Stars')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:20:19.082781Z","iopub.execute_input":"2024-08-31T10:20:19.083401Z","iopub.status.idle":"2024-08-31T10:20:19.500728Z","shell.execute_reply.started":"2024-08-31T10:20:19.083335Z","shell.execute_reply":"2024-08-31T10:20:19.499177Z"},"trusted":true},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x500 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"example = df['Phrase'][1]\nprint(example)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:20:19.502429Z","iopub.execute_input":"2024-08-31T10:20:19.502952Z","iopub.status.idle":"2024-08-31T10:20:19.510142Z","shell.execute_reply.started":"2024-08-31T10:20:19.502895Z","shell.execute_reply":"2024-08-31T10:20:19.508876Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"A series of escapades demonstrating the adage that what is good for the goose\n","output_type":"stream"}]},{"cell_type":"code","source":"tokens = nltk.word_tokenize(example)\ntagged = nltk.pos_tag(tokens)\ntokens[:10]\ntagged[:10]","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:20:19.511711Z","iopub.execute_input":"2024-08-31T10:20:19.512149Z","iopub.status.idle":"2024-08-31T10:20:19.713652Z","shell.execute_reply.started":"2024-08-31T10:20:19.512106Z","shell.execute_reply":"2024-08-31T10:20:19.712328Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"[('A', 'DT'),\n ('series', 'NN'),\n ('of', 'IN'),\n ('escapades', 'NNS'),\n ('demonstrating', 'VBG'),\n ('the', 'DT'),\n ('adage', 'NN'),\n ('that', 'IN'),\n ('what', 'WP'),\n ('is', 'VBZ')]"},"metadata":{}}]},{"cell_type":"code","source":"entities = nltk.chunk.ne_chunk(tagged)\nentities.pprint()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:20:19.715761Z","iopub.execute_input":"2024-08-31T10:20:19.716399Z","iopub.status.idle":"2024-08-31T10:20:19.910884Z","shell.execute_reply.started":"2024-08-31T10:20:19.716343Z","shell.execute_reply":"2024-08-31T10:20:19.909397Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"(S\n  A/DT\n  series/NN\n  of/IN\n  escapades/NNS\n  demonstrating/VBG\n  the/DT\n  adage/NN\n  that/IN\n  what/WP\n  is/VBZ\n  good/JJ\n  for/IN\n  the/DT\n  goose/NN)\n","output_type":"stream"}]},{"cell_type":"code","source":"from nltk.sentiment import SentimentIntensityAnalyzer\nfrom tqdm.notebook import tqdm\n\nsia = SentimentIntensityAnalyzer()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:20:19.912475Z","iopub.execute_input":"2024-08-31T10:20:19.912925Z","iopub.status.idle":"2024-08-31T10:20:19.960540Z","shell.execute_reply.started":"2024-08-31T10:20:19.912880Z","shell.execute_reply":"2024-08-31T10:20:19.959247Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/nltk/twitter/__init__.py:20: UserWarning: The twython library has not been installed. Some functionality from the twitter package will not be available.\n  warnings.warn(\"The twython library has not been installed. \"\n","output_type":"stream"}]},{"cell_type":"code","source":"# Run the polarity score on the entire dataset\nres = {}\nfor i, row in tqdm(df.iterrows(), total=len(df)):\n    text = row['Phrase']\n    myid = row[0]\n    res[myid] = sia.polarity_scores(text)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:20:19.962117Z","iopub.execute_input":"2024-08-31T10:20:19.962577Z","iopub.status.idle":"2024-08-31T10:21:06.806691Z","shell.execute_reply.started":"2024-08-31T10:20:19.962530Z","shell.execute_reply":"2024-08-31T10:21:06.805245Z"},"trusted":true},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/156060 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"fe53a72347ae4e09bcc8f816fac6b160"}},"metadata":{}},{"name":"stderr","text":"/tmp/ipykernel_36/2851595402.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  myid = row[0]\n","output_type":"stream"}]},{"cell_type":"code","source":"vaders = pd.DataFrame(res).T\nvaders = vaders.reset_index().rename(columns={'index': 'PhraseId'})\nvaders = vaders.merge(df, on='PhraseId', how='left')","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:21:06.812371Z","iopub.execute_input":"2024-08-31T10:21:06.812935Z","iopub.status.idle":"2024-08-31T10:21:12.394304Z","shell.execute_reply.started":"2024-08-31T10:21:06.812876Z","shell.execute_reply":"2024-08-31T10:21:12.393227Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"# Now we have sentiment score and metadata\nvaders.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:21:12.395664Z","iopub.execute_input":"2024-08-31T10:21:12.396024Z","iopub.status.idle":"2024-08-31T10:21:12.417178Z","shell.execute_reply.started":"2024-08-31T10:21:12.395985Z","shell.execute_reply":"2024-08-31T10:21:12.415761Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"   PhraseId  neg    neu    pos  compound  SentenceId  \\\n0         1  0.0  0.843  0.157    0.5579           1   \n1         2  0.0  0.805  0.195    0.4404           1   \n2         3  0.0  1.000  0.000    0.0000           1   \n3         4  0.0  0.000  0.000    0.0000           1   \n4         5  0.0  1.000  0.000    0.0000           1   \n\n                                              Phrase  Sentiment  \n0  A series of escapades demonstrating the adage ...          1  \n1  A series of escapades demonstrating the adage ...          2  \n2                                           A series          2  \n3                                                  A          2  \n4                                             series          2  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PhraseId</th>\n      <th>neg</th>\n      <th>neu</th>\n      <th>pos</th>\n      <th>compound</th>\n      <th>SentenceId</th>\n      <th>Phrase</th>\n      <th>Sentiment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0.843</td>\n      <td>0.157</td>\n      <td>0.5579</td>\n      <td>1</td>\n      <td>A series of escapades demonstrating the adage ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>0.0</td>\n      <td>0.805</td>\n      <td>0.195</td>\n      <td>0.4404</td>\n      <td>1</td>\n      <td>A series of escapades demonstrating the adage ...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>0.0</td>\n      <td>1.000</td>\n      <td>0.000</td>\n      <td>0.0000</td>\n      <td>1</td>\n      <td>A series</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>0.0</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.0000</td>\n      <td>1</td>\n      <td>A</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.0</td>\n      <td>1.000</td>\n      <td>0.000</td>\n      <td>0.0000</td>\n      <td>1</td>\n      <td>series</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"ax = sns.barplot(data=vaders, x='Sentiment', y='compound')\nax.set_title('Compund Score by Sentiment Score')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:21:12.418780Z","iopub.execute_input":"2024-08-31T10:21:12.419215Z","iopub.status.idle":"2024-08-31T10:21:13.974916Z","shell.execute_reply.started":"2024-08-31T10:21:12.419148Z","shell.execute_reply":"2024-08-31T10:21:13.973404Z"},"trusted":true},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAkYAAAHMCAYAAAAwHmdPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABGZUlEQVR4nO3deVxUZf//8fcgg6CIiKCIKIu4Z2qZllaidqslpZblkt0maVqat31bb7tNLa1s+bap3ZVL2U/NpdQ0cyvNW63MNO9IDRdKcUkIRyKTWK7fHx3m68SgOCAD8no+Hj6cOec653zOHIZ5c53rnLEZY4wAAAAgH28XAAAAUF4QjAAAACwEIwAAAAvBCAAAwEIwAgAAsBCMAAAALAQjAAAAC8EIAADAQjACAACwEIyACiQ+Pl42m83bZZR7GzdulM1m08SJE71dSoUxceJE2Ww2bdy40dulAF5FMEKp2bt3rx544AFddtllqlmzpvz8/BQREaFevXpp1qxZys7O9naJldK6devUt29fRUREyM/PT7Vq1VKTJk10++2367XXXhPfClT6zpw5oxdffFEdOnRwvhfq1aunK6+8UqNHj9bnn39e5jW98847stlseuedd8p822WppKF48eLF6tmzp+rUqSO73a7atWurRYsWGjx4sN59993SLRblkq+3C8Cl4amnntKkSZOUn5+va665RkOGDFFgYKB+/vlnbdy4UcOGDdMbb7yh7du3e7vUSuWZZ57RE088IV9fX/Xs2VNNmzZVlSpVdODAAX3++edasmSJ7r//fvn68qugtGRlZalz587asWOHwsPDddtttyk8PFxZWVnatWuX3nrrLTkcDnXu3NnbpboYPXq0BgwYoIYNG3q7FK+599579fbbbysgIEC9evVSTEyMjDHau3evVqxYoY0bN2rIkCHeLhMXGb8NUWLPPPOMJkyYoAYNGmjx4sXq0KFDoTYrV67USy+95IXqKq+ffvpJTz75pIKCgrR582a1atXKZX5+fr7WrVunKlWqeKnCS9Mrr7yiHTt2qHv37lqxYoX8/Pxc5p88eVJ79uzxUnVFCw0NVWhoqLfL8JrNmzfr7bffVmRkpL744gtFRka6zM/JyeE0Y2VhgBJISUkxdrvd2O128913352z7ZkzZwpNW7hwobnuuutMUFCQ8ff3N5dddpl55pln3LaNiooyUVFR5tdffzVjx441kZGRxt/f37Ru3dosXbrUGGNMTk6OmTx5somLizNVq1Y1sbGx5vXXXy+0rg0bNhhJZsKECWbr1q2mW7duJigoyAQGBpru3bubr7/+utAyQ4YMMZJMSkrKOdd3ts6dOxtJJicnx0yZMsXExcUZPz8/ExkZaR599FGTnZ3t9rVasGCBueKKK4y/v78JCwszgwcPNkeOHHGurzgWLlxoJJnevXsXq/3ZvvrqK3PHHXeYiIgI4+fnZ8LDw83f/vY3s3DhQrfbudBjeOrUKfPggw+aqKgo4+vr6/K67dmzxwwZMsRERkYau91u6tSpYwYOHGj27t1b7Pov9Pg+/vjjRpJ555133K5v+/btRpLp1avXebd94403GknOn8niysnJMdOnTzcdOnQwNWrUMAEBAaZNmzbm9ddfN3l5eS5tU1JSjCQzZMgQk5KSYvr3729q165tqlataq688kqzYsUKl/YFPzfu/hX8PE+YMMFIMhs2bHBZVpLp3LmzOX78uBk6dKipU6eOqVatmrnmmmvMpk2bjDHGZGVlmYcfftg0bNjQ+Pn5mRYtWphFixYVua/z58838fHxpmbNmqZq1aqmWbNm5umnn3b7M1Ow/bS0NDN8+HATHh7u3Mbs2bNd2ha8R939++t+/dXUqVONJPOPf/zjnO3cWbNmjUlISDBhYWHO9/ctt9xi1q1b59IuLy/PvPHGG6Zdu3amevXqplq1aqZdu3ZmxowZhY7x2ft+7Ngxc88995iIiAjj4+Nj5syZ42zz5Zdfmttuu83UrVvX2O12ExkZae69915z5MiRC94P/IkeI5TInDlzlJOTowEDBuiyyy47Z9uqVau6PB83bpyeffZZhYaGatCgQQoMDNQnn3yicePGac2aNVq7dm2hv7ZzcnL0t7/9TRkZGerdu7f++OMPLViwQLfddpvWrl2rGTNm6KuvvtKNN96oqlWravHixXrggQcUFham/v37F6rpq6++0rPPPqsbbrhBo0aN0v79+/Xhhx9q06ZNWrt2ra677rqSv0iSBg0apP/85z+68cYbFRQUpFWrVun555/XiRMnNGfOHJe2L7/8sv7nf/5HwcHB+vvf/67g4GCtWbNGHTt2VM2aNYu9zdq1a0uSDh48qLy8vGL3DL399tu67777VKVKFd1yyy1q3LixTpw4oe3bt2vGjBm64447nG09OYZ//PGHunbtqoyMDHXv3l1BQUGKiYmRJK1evVq33nqrcnJydPPNNysuLk6pqan68MMP9fHHH2vDhg264ooriv0aFPf4jhgxQs8//7zeeustt6dK3nzzTUnSyJEjz7vNgtc9OTm52HUW7O+aNWvUtGlTDRo0SP7+/tqwYYMeeOABffXVV3rvvfcKLffTTz+pffv2io2N1V133aWMjAwtXLhQvXv31vr169WlSxdJ0t13363g4GAtX75cvXv3Vps2bZzrCA4OPm99DodDnTp1Uo0aNTRw4EBlZGTo/fffV48ePfTFF19oxIgRysjIUEJCgnJycrRgwQL1799fDRo00NVXX+2yrsTERM2ZM0eRkZG67bbbFBwcrC+//FLjx4/Xp59+qnXr1hU6tVuwfT8/P/Xr10/Z2dlavHixEhMT5ePj4zxmffr0kSS9++676ty5s+Lj453riI6OPuc+Fhy3ffv2nff1ONuECRP01FNPKTAwUH369FGDBg109OhRbd26Vf/v//0/3XDDDc62d911l+bPn68GDRpo2LBhstlsWrp0qe6//35t3rxZ8+bNK7T+jIwMXX311QoMDNStt94qHx8f1a1bV5I0e/Zs3XvvvapatapuueUWNWjQQPv27dPMmTO1YsUKffnll5X61KjHvJ3MULF17drVSDJvv/32BS23detWI8k0aNDAHDt2zDk9JyfHJCQkGElmypQpLstERUUZSSYhIcHlL8tNmzYZSaZWrVqmXbt25uTJk855Bw4cMHa73bRp08ZlXQU9CpIK9SgtW7bMSDJxcXEuf8WVpMfoiiuuML/88otzelZWlmnUqJHx8fFx2f+CHrhatWq5bCcvL8/ceuutzpqLIysry/maXXfddWbWrFkmKSnJ5ObmFrnM999/b3x9fU2tWrVMUlJSofmHDx92Pi7JMezWrZvJyspymZeRkWGCg4NN7dq1zffff+8y77vvvjPVq1c3bdu2Lda+e3J8e/XqZSQV6vnMzMw0gYGBpkGDBud87QqsWLHCSDJ+fn7mvvvuMytXrjRHjx495zIFvTWjR4922UZubq5JTEw0ksyyZcuc0wt6jCSZiRMnuqxr9erVRpK58cYbXabPmTPHSHLpbXBXg7seI0lmxIgRLq/X3Llzne+7hIQE8/vvvzvnFbwn+/Tp47aGvn37mtOnT7vd/iuvvOJ2+/fcc4/La/P999+bKlWqmObNm7u0L+q9eD6pqammZs2aRpK5+eabzbx580xycrLJz88vcpk1a9YYSSYmJsakpqYWmn/2+2X+/PlGkmnbtq359ddfndOzsrLMlVdeaSSZefPmud33u+66y+Tk5LjM++GHH4zdbjeNGjUqtO3169cbHx+fQq8/iodghBJp3ry5kWQ++eSTC1pu2LBhRpJ58803C8374YcfjI+Pj4mJiXGZXvChun///kLLxMTEGEnm008/LTQvPj7e+Pr6uvxSLfjl+dcPxwIFgWbjxo3OaSUJRn/tUjfGmCeffNJIcjntMXnyZCPJPPnkk4XaHzhwwPj4+BQ7GBljzK5du0ybNm1cTikEBASY66+/3kyfPr3QqYvRo0cbSeZ///d/z7vukhzDb7/9ttAyr7zyipFkpk2b5nZ7Y8eONZIKhSZ3PDm+K1eudIaTs/373/82ksykSZPOu90Cr776qvNDtuBfeHi4GTRokPn8889d2ubl5ZmQkBATHh5e6MPPGGNOnjxpbDabuf32253TCoJRVFSU27DWsGFDU7t2bZdpJQlG1apVM5mZmS7Tc3Nzja+vr5FkDhw4UGh90dHRJjo62mVamzZtjK+vr8sfL2evr3bt2uaqq65yu/1Tp04VWub66683klyChqfByBhjPvvsM9OoUSOX41ajRg3To0cP89577xV6rQv+APjwww/Pu+4bbrjBSDJr1qwpNG/9+vVGkunSpYvL9IKA/fPPPxdapuD9sHLlSrfb69Onj6lSpUqh44bz41QavGLHjh2SpK5duxaa16RJE0VGRiolJUWnTp1yOX0UHBysRo0aFVomIiJCKSkpuvLKKwvNq1+/vnJzc3X8+HHVr1/fZd51110nH5/Cd62Ij4/X559/rp07d5bK1UPt2rUrNK1BgwaS/hyMW6DgdXG3zdjYWDVo0EA//fRTsbd7+eWXa+fOndq+fbs2bNigHTt26IsvvtCmTZu0adMmvfXWW9qwYYNq1aolSfryyy8lSTfeeON51+3pMfT399fll19eaJkvvvhCkrRr1y63l1oXnJras2ePWrRocd76pAs7vjfeeKNiYmL03nvvaerUqapWrZok6a233pKvr6+GDRtWrG1K0pgxYzRs2DCtW7dOW7du1c6dO7V161bNnz9f8+fP1/jx4/XUU0859ysjI0ONGzfW5MmT3a4vICDA7YDtNm3auD1F2qBBA+frWRqaNGmiGjVquEyrUqWK6tatq99++02xsbGFlqlfv76++uor5/PTp09r165dCg0N1SuvvOJ2O1WrVnW7n40bN1ZQUFCh6We/hwIDAy9kl9zq0qWLkpOTtWXLFufPx5YtW7RmzRqtWbNG7777rlauXOkcFvDll1/KZrOpZ8+e5133jh075OPj43J6r0Dnzp1VpUoV7dy5s9C86Oho1alTp9D0guP7+eef6+uvvy40/8SJE8rLy1NycrLb34soGsEIJVKvXj3t2bNHR44cuaDlTp065Vy+qPUeOnRIDofD5UO1qDE2BWMS3M0vmJeTk1NoXsG5+r8KDw93qbOk3I3jKKgrLy/POa1ge+eq60KCUYF27dq5hLNt27ZpyJAh2rVrlyZNmuT8oHI4HJJUKEC64+kxrFOnjtubVP7yyy+S/hzjdC5ZWVnnra3AhRxfHx8fjRgxQo8//rgWLlyooUOH6ptvvtGOHTvUp08fRUREFHu7klStWjX17t1bvXv3lvTn2Kq3335b//jHP/T000/r1ltvVZs2bZz7vW/fPk2aNKnI9bnb76LGB/n6+io/P/+C6j2Xc73vzjUvNzfX+fzkyZMyxigtLe2c++nOufZTcn0PlZSPj4+uu+465/gzY4zWrVunIUOGaP369XrjjTc0duxYSX++X2rVqqWAgIDzrvfUqVMKCQkpNOauYD9CQ0N14sSJQvMKflb/quDn5oUXXjjndi/k/YI/cYNHlMi1114rSfr0008vaLmCX6bHjx93O//YsWMu7S6Wn3/+2e30grrO3n5Bz8PZv+wLFASKkirY3vnqKqn27dtr2rRpkqTPPvvMOb3gA6g4QdfTY1jUnbsL2u3atUvmz9P8bv9dyH1kLuT4Sn8ODK5atapzsHXB/yNGjCj2Novi5+enUaNGaeDAgZL+73UvqKFv377n3O+UlJQS1+BNBfvZtm3bc+6nKWc3HLXZbOrevbuzN++v75eTJ0/q999/P+96atasqYyMDLd/oOXm5io9Pd1tr9j53i+nTp0652tZ3u6XVREQjFAiQ4cOld1u1wcffKDdu3efs+3Zd75u27atJLm9L8j+/fuVmpqqmJiYYl0xUxKbN292+5d1QV0FdUpynm46fPhwofaldePKgiuu3N0Z+eDBg2637amCUyNnfxAVXEH0ySefnHf50j6GBdv+z3/+U6z2xXEhx1eSwsLC1K9fP3311VfasmWLFixYoJiYGHXv3r3Uavrr696sWTPnlVnuPjRLS8Ept9LsXbkQgYGBatmypb7//ntlZGRctO1crP0s6v1ijNHq1avPu3zbtm2Vn5+vTZs2FZq3adMm5eXlXdAVlxfj/YI/EYxQItHR0Zo4caL++OMP9erVq8iAsHr1apdxK4mJiZKkyZMnKy0tzTk9Ly9PDz/8sPLz83XPPfdc3OL15+mLGTNmuExbvny5Pv/8c8XFxblcrt++fXtJhU/1fPfdd3r11VdLpZ4777xTdrtdr7/+un788Ufn9Pz8fD3yyCMXdHpk27Zteuedd9z+NZuTk6OpU6dKkq6//nrn9Pvuu0++vr56+umn3Qbd1NRU5+PSPoZDhw5VcHCwJk2apG3bthWan5+ff8E32LuQ41vgvvvukyT1799fWVlZGj58uNtxSkX597//7Ryr9Vd79+7V4sWLJf3f6+7r66sHHnhAx44d05gxY9wer2PHjp33D4/zKbgc/dChQyVaT0n8z//8j/744w8lJia67WU9efKkc+yapzzdz9WrV+vDDz90G06zsrKcp5vPfr888MADkqSHHnrIbS/r2dMK3i///Oc/dfr0aef006dP6/HHH5ekC3q/jB49Wna7XQ8++KDbW0P88ccfhCYPMcYIJTZu3Djl5uZq0qRJuuqqq9SxY0e1a9fO+ZUgmzZt0r59+1zGuHTs2FGPPvqonn/+eV122WXq16+fqlevrk8++URJSUm69tpr9cgjj1z02nv27KmHHnpIn3zyiVq3bu28z42/v79mz57t8oHYu3dvNW7cWAsWLFBqaqo6dOigQ4cOOe8Ns2jRohLXEx0dreeee04PPfSQ2rZtq/79+6tmzZpas2aNHA6HLr/8cv33v/8t1rqOHj2qoUOHavTo0br22mvVokUL+fv769ixY1q9erWOHz+uuLg4Pfnkk85lWrRooRkzZmjkyJFq27atc59/+eUXff311woKCtKGDRsklf4xrF27tpYsWaK+ffvq6quvVrdu3dSyZUvZbDYdPnxYX3zxhX755RedOXOm2Ou8kONboFOnTmrdurV27dolu93u/EArrtWrV+u+++5TdHS0OnXqpAYNGig7O1v79u3TmjVrlJOTozFjxuiqq65yLjN+/Hjt2rVL//73v7VixQp17dpV9evX14kTJ7Rv3z5t2bJFU6ZMKfagc3euueYaVatWTa+88op++eUX59iVBx544KKfsi6QmJiob775RjNmzFCjRo3Uo0cPNWzYUBkZGUpJSdGmTZs0dOhQ/fvf//Z4G02bNlX9+vX1/vvvy263KyoqSjabTXfddZeioqKKXG7v3r168MEHVatWLV133XVq3LixfH19lZqaqo8//lgOh0MdOnTQ6NGjnct0795d//rXvzR58mQ1b97ceR+jn3/+WZs3b9bVV1/t/G66QYMGafny5Vq0aJFatmypPn36yGazadmyZUpJSVH//v115513Fns/mzVrptmzZysxMVEtW7ZUz5491aRJE+Xk5OjQoUP6z3/+o7CwMO3du9fj17LSushXvaES2b17txk9erRp2bKlqVGjhrHb7SY8PNz07NnTzJw50+1dbRcsWGA6depkAgMDTdWqVU2LFi3M5MmTXe6JUqDgrsnunOuO0O4us3d3Z+QaNWqYwMBA87e//c1s27bN7boOHTpk7rjjDlOrVi3j7+9v2rVrZz744IPzXq7vzrkun54/f75p27atqVq1qgkNDTV33nnnBd/5OjMz08yfP9/cfffdplWrVqZ27dqmSpUqplatWuaaa64xzz77rMtlzmfbunWrufXWW01YWJix2+2mXr16pkePHmbx4sWF2pbWMSyQkpJiRo0a5bx7eY0aNUzTpk3N4MGDi303aU+Pb4GCWwf069evWNs72w8//GBefPFF07NnT9OoUSNTrVo14+fnZxo0aGD69u1b6K7UBfLz883cuXNN165dTa1atYzdbjcRERGmU6dOZsqUKebQoUPOtmff+dqdon5OPvnkE3P11Veb6tWrOy9HL+6dr93x9D25YsUK06tXL+fPV926dc1VV11lnnjiCbNnz55ib7+oW2hs27bNdO3a1QQFBRmbzeZ2v/4qLS3NzJo1ywwYMMA0b97cBAcHG19fXxMaGmri4+PN9OnTi7xT/ccff2x69OhhatWq5bzzdZ8+fQrdPiQvL89Mnz7dXHnllSYgIMAEBASYK664wkybNu2cd74+l//+979myJAhzruO16pVy7Rs2dLce++9bm9fgvOzGVPORroBZWDjxo3q0qWLJkyY4PG3cOPSdffdd+vdd9/V+vXr1a1bN2+XA6AMMcYIAM5y+PBhvf/++2revLnbezQBuLQxxggAJM2fP1/Jycl6//33lZ2draeffrrIS6UBXLoIRgCgP+9wvWnTJjVo0EAvv/yybrvtNm+XBMALGGMEAABgYYwRAACAhWAEAABgIRgBAABYCEYAAAAWrkrz0MmTJ91+yzoAACh/fH19nV8Gfs52ZVDLJSk3N/eifhM2AAAoe5xKAwAAsBCMAAAALAQjAAAAC8EIAADAQjACAACwEIwAAAAsBCMAAAALwQgAAMBCMAIAALAQjAAAACwEIwAAAAvBCAAAwMKXyAIAALeefvppZWRkSJJCQkI0fvx4L1d08RGMAACAWxkZGUpPT/d2GWWKU2kAAAAWghEAAICFYAQAAGAhGAEAAFgYfA0AQDngs+clb5dQWM4pl8flskZJ+c0fKrV10WMEAABgqfA9RqtXr9aKFSvkcDgUFRWlxMRExcXFnXe5LVu26NVXX1W7du306KOPlkGlAACgvKvQPUZbt27V3Llz1a9fP02dOlVRUVGaMmWKTp06dc7lTpw4offee0/Nmzcvo0oBAEBFUKGD0cqVK9WtWzd16dJFkZGRGj58uPz8/LRhw4Yil8nPz9frr7+uO+64Q3Xq1CnDagEAqFhCavgptKZdoTXtCqnh5+1yykSFPZWWm5urgwcPqk+fPs5pPj4+atWqlZKTk4tcbsmSJQoKClLXrl21Z8+eMqgUAICKacLfG3u7hDJXYYNRZmam8vPzFRwc7DI9ODhYR48edbvM3r179dlnn+n5558v9nZycnKUk5PjfG6z2RQQEOB8DAAAvKs0P48rbDC6UL///rtef/11jRgxQkFBQcVebunSpVqyZInzeUxMjKZOnaqwsLCLUSYAoJI6vtvbFVRc9erVK7V1VdhgFBQUJB8fHzkcDpfpDoejUC+SJP38889KS0vT1KlTndOMMZKkAQMG6JVXXlF4eHih5fr27auEhATn84JUmpaWptzc3FLYEwAAJM5BeO7YsWPnbePr61usTo0KG4x8fX0VGxurpKQktW/fXtKfA6uTkpLUs2fPQu0jIiL04osvukx7//33debMGd19990KDQ11ux273S673e52XkGwAgCgpAhGnivNz+MKG4wkKSEhQdOnT1dsbKzi4uK0atUqZWdnKz4+XpI0bdo0hYSEaNCgQfLz81PDhg1dlq9evbokFZoOAAAqpwod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i3r88cfVpk2b0qoVAADgovI4GH3wwQeKiorSpEmT5O/v75zerl079ezZU08++aQWL15MMAIAABWGxzd4PHTokDp37uwSigr4+/srPj5ehw4dKlFxAAAAZcnjYGS325WVlVXk/KysLNntdk9XDwAAUOY8DkaXXXaZVq1apeTk5ELz9u3bp08++UStWrUqUXEAAABlyeMxRoMHD9YTTzyh8ePHKy4uThEREZKko0ePav/+/apZs6buvPPOUisUAADgYvM4GNWpU0cvvviili5dqm+//VZbt26V9Od9jG666Sb16dNHNWvWLLVCAQAALjaPg1FeXp7sdrvuvvtut/NPnz6tvLw8ValSxdNNAAAAlCmPxxjNmTNH48ePL3L++PHjNXfuXE9XDwAAUOY8DkbffvutOnToUOT8q6++Wjt37vR09QAAAGXO42B08uRJhYSEFDm/Vq1aysjI8HT1AAAAZc7jYBQYGKijR48WOf/IkSMKCAjwdPUAAABlzuNg1KZNG61fv14pKSmF5h08eFDr169X27ZtS1QcAABAWfL4qrT+/fvr22+/1bhx43TllVeqQYMGkqTDhw/rm2++UVBQkPr3719qhQIAAFxsHgejkJAQPffcc5o3b562b9+ur7/+WpIUEBCga6+9VgMHDjznGCQAAIDyxuNgJP05wHr06NEyxigzM1OSFBQUJJvNVirFAQAAlKUSBaMCNpuNu1wDAIAKz+PB1wAAAJcaghEAAICFYAQAAGAhGAEAAFhKZfA1AFR0Tz/9tPNrjEJCQs75JdkALl0EIwCQlJGRofT0dG+XAcDLOJUGAABgoccIQJla89Exb5fg1u+n81wel9c6e9xSz9slAJc0ghEASKoWUNPtYwCVC8EIACT16Hq/t0sAUA4wxggAAMBCMAIAALAQjAAAACwEIwAAAEuFH3y9evVqrVixQg6HQ1FRUUpMTFRcXFyR7b/44gstXLhQaWlpCg8P15133qkrrriiDCsGAADlVYXuMdq6davmzp2rfv36aerUqYqKitKUKVN06tQpt+1/+OEHvfrqq+rataumTp2qq666Si+88IIOHTpUxpUDAIDyqEIHo5UrV6pbt27q0qWLIiMjNXz4cPn5+WnDhg1u269atUpt2rTRLbfcosjISA0YMECxsbFavXp1GVcOAADKowp7Ki03N1cHDx5Unz59nNN8fHzUqlUrJScnu10mOTlZCQkJLtNat26tr7/+usjt5OTkKCcnx/ncZrMpICDA+RgAyhK/d8oPjkX5UZrHosIGo8zMTOXn5ys4ONhlenBwsI4ePep2GYfDoZo1Xe9oW7NmTTkcjiK3s3TpUi1ZssT5PCYmRlOnTlVYWNh5a/zmzpvO2wbuXTlvVamur/uzH5Tq+iqTtf+8rVTXN3QkX2lRXjz33HPeLgFnq/eStyuAKnAwKit9+/Z16WUqSKVpaWnKzc31VlmXvGPHyuf3VFVGHAsAlwJfX99idWpU2GAUFBQkHx+fQr09DoejUC9SgeDg4EIDs0+dOlVke0my2+2y2+1u5xljLqRkXABe2/KDYwGgMqmwg699fX0VGxurpKQk57T8/HwlJSWpSZMmbpdp0qSJvvvuO5dp//3vf9W4ceOLWisAAKgYKmwwkqSEhAR9+umn2rhxo1JTUzVz5kxlZ2crPj5ekjRt2jTNnz/f2f6mm27Srl27tGLFCh05ckSLFi3SgQMH1LNnTy/tAQAAKE8q7Kk0SerYsaMyMzO1aNEiORwORUdHa9y4cc5TY+np6S4j1Zs2baoxY8bo/fff14IFC1SvXj098sgjatiwoZf2AAAAlCc2wwACj6Slpblcxu/OsUeGlVE1l556L8ws1fXd/e4Xpbq+yuSdIdd4uwQAKDG73V6swdcV+lQaAABAaSIYAQAAWAhGAAAAFoIRAACAhWAEAABgIRgBAABYCEYAAAAWghEAAICFYAQAAGAhGAEAAFgIRgAAABaCEQAAgIVgBAAAYCEYAQAAWAhGAAAAFoIRAACAhWAEAABgIRgBAABYCEYAAAAWghEAAICFYAQAAGAhGAEAAFgIRgAAABaCEQAAgMXX2wUAlVne1x9K2b/9+aRqdVW56lbvFgQAlRzBCPCm7N+kM796uwoAgIVTaQAAABaCEQAAgIVgBAAAYGGMESqFd4Zc4+0S3Hrw20VKt8YYhQZW1cvltE4AqCzoMQIAALAQjAAAACycSgO8KCQkxO1jAIB3EIwALxo/fry3SwAAnIVTaQAAABaCEQAAgIVgBAAAYCEYAQAAWAhGAAAAFoIRAACAhWAEAABgIRgBAABYCEYAAAAWghEAAIClwn4lSFZWlmbPnq1vvvlGNptNHTp00NChQ+Xv71/kMuvXr9fmzZuVkpKi33//XXPmzFH16tXLsGoAAFCeVdgeo9dee02HDx/Wv/71Lz3++OPas2eP3nzzzXMuk52drTZt2qhv375lVCUAAKhIKmQwSk1N1bfffquRI0eqcePGatasmRITE7V161ZlZGQUuVyvXr3Up08fNW7cuAyrBQAAFUWFDEbJycmqXr26GjVq5JzWqlUr2Ww27d+/34uVAQCAiqxCjjFyOBwKCgpymValShUFBgbK4XCU6rZycnKUk5PjfG6z2RQQEOB8jIuD1xYA4A3lKhjNmzdPy5cvP2ebl19+uYyq+dPSpUu1ZMkS5/OYmBhNnTpVYWFh51326MUs7BJXr149b5cAAKiEylUwuvnmmxUfH3/ONnXr1lVwcLAyMzNdpufl5SkrK0vBwcGlWlPfvn2VkJDgfF7Qk5GWlqbc3NxS3Rb+z7Fjx7xdAgDgEuLr61usTo1yFYyCgoIKnSJzp0mTJvrtt9908OBBxcbGSpKSkpJkjFFcXFyp1mS322W3293OM8aU6rbwf3htAQDeUCEHX0dGRqpNmzZ68803tX//fu3du1ezZ89Wx44dFRISIknKyMjQ2LFjXQZjOxwO/fjjjzp+/Lgk6dChQ/rxxx+VlZXllf0AAADlS7nqMboQY8aM0axZs/TUU085b/CYmJjonJ+bm6ujR48qOzvbOW3t2rUu44UmTJggSbr//vvPewoPAABc+myGcxYeSUtLc7lazZ1jjwwro2ouPfVemOntEgAAlxC73V6sMUYV8lQaAADAxUAwAgAAsBCMAAAALAQjAAAAC8EIAADAQjACAACwEIwAAAAsBCMAAAALwQgAAMBCMAIAALAQjAAAACwEIwAAAAvBCAAAwEIwAgAAsBCMAAAALAQjAAAAC8EIAADAQjACAACwEIwAAAAsBCMAAAALwQgAAMBCMAIAALAQjAAAACwEIwAAAAvBCAAAwEIwAgAAsBCMAAAALAQjAAAAC8EIAADA4uvtAlD2Zvzyh07lGUlSzSo23V/bz8sVAQBQPhCMKqFTeUYn8wueGW+WAgBAucKpNAAAAAvBCAAAwEIwAgAAsBCMAAAALAQjAAAAC8EIAADAwuX6F1G9F2Z6uwS3qjz4oJSe/ufjkFDVe+FlL1cEAED5QI8RAACAhWAEAABgIRgBAABYCEYAAAAWghEAAICFq9IqoZCQELePAQCo7GzGGL5e3QNpaWnKycnxdhkAAKAY7Ha7wsLCztuuwvYYZWVlafbs2frmm29ks9nUoUMHDR06VP7+/kW2X7RokXbt2qX09HQFBQXpqquu0oABA1StWrUyrh4AAJRHFTYYvfbaazp58qT+9a9/KS8vTzNmzNCbb76pf/zjH27bZ2RkKCMjQ3fddZciIyOVnp6ut99+WydPntRDDz1UxtUDAIDyqEIOvk5NTdW3336rkSNHqnHjxmrWrJkSExO1detWZWRkuF2mYcOGevjhh9WuXTuFh4frsssu04ABA/TNN98oLy+vjPcAAACURxWyxyg5OVnVq1dXo0aNnNNatWolm82m/fv3q3379sVaz+nTpxUQEKAqVaoU2SYnJ8dlLJHNZlNAQIDzMQAAuHRUyGDkcDgUFBTkMq1KlSoKDAyUw+Eo1joyMzP1wQcf6IYbbjhnu6VLl2rJkiXO5zExMZo6dWqxBnABAICKpVwFo3nz5mn58uXnbPPyyyX/wtPTp0/rueeeU2RkpG6//fZztu3bt68SEhKczwt6idLS0pSbm1viWgAAwMXn6+tb8a5Ku/nmmxUfH3/ONnXr1lVwcLAyMzNdpufl5SkrK0vBwcHnXP7333/XM888o4CAAD388MPy9T33S2C322W3293O404HAABcWspVMAoKCip0isydJk2a6LffftPBgwcVGxsrSUpKSpIxRnFxcUUud/r0aU2ZMkV2u12PPvqo/Pz8Sq12AABQ8VXIq9IiIyPVpk0bvfnmm9q/f7/27t2r2bNnq2PHjs47OWdkZGjs2LHav3+/pP8LRdnZ2Ro5cqR+//13ORwOORwO5efne3N3AABAOVGueowuxJgxYzRr1iw99dRTzhs8JiYmOufn5ubq6NGjys7OliSlpKRo3759zmXPNm3aNNWpU6fsigcAAOUSXwniIb4SBACAiqO4XwlSIU+lAQAAXAwEIwAAAEuFHWPkbee7zB8AAJQfxf3cZowRAACAhVNpldTvv/+uxx57TL///ru3S6n0OBblB8ei/OBYlB+V7VgQjCopY4xSUlK4e3c5wLEoPzgW5QfHovyobMeCYAQAAGAhGAEAAFgIRpWU3W5Xv379ivyCXJQdjkX5wbEoPzgW5UdlOxZclQYAAGChxwgAAMBCMAIAALAQjAAAACwEIwAAAAtf+FUJrV69WitWrJDD4VBUVJQSExMVFxfn7bIqnd27d+ujjz5SSkqKTp48qYcffljt27f3dlmV0tKlS7Vt2zYdOXJEfn5+atKkiQYPHqyIiAhvl1bprF27VmvXrlVaWpokKTIyUv369VPbtm29XBmWLVum+fPn66abbtLdd9/t7XIuGnqMKpmtW7dq7ty56tevn6ZOnaqoqChNmTJFp06d8nZplU52draio6N1zz33eLuUSm/37t3q0aOHpkyZon/961/Ky8vT5MmTdebMGW+XVumEhIRo0KBBeu655/Tss8/qsssu0/PPP6/Dhw97u7RKbf/+/Vq3bp2ioqK8XcpFRzCqZFauXKlu3bqpS5cuioyM1PDhw+Xn56cNGzZ4u7RKp23bthowYAC9ROXAE088ofj4eDVo0EDR0dEaNWqU0tPTdfDgQW+XVum0a9dOV1xxherVq6eIiAgNHDhQ/v7+2rdvn7dLq7TOnDmj119/XSNGjFD16tW9Xc5FRzCqRHJzc3Xw4EG1atXKOc3Hx0etWrVScnKyFysDypfTp09LkgIDA71cSeWWn5+vLVu2KDs7W02aNPF2OZXWzJkz1bZtW11++eXeLqVMMMaoEsnMzFR+fr6Cg4NdpgcHB+vo0aPeKQooZ/Lz8/XOO++oadOmatiwobfLqZQOHTqkJ554Qjk5OfL399fDDz+syMhIb5dVKW3ZskUpKSl69tlnvV1KmaHHCADOMmvWLB0+fFhjx471dimVVkREhF544QU988wz6t69u6ZPn67U1FRvl1XppKen65133tGYMWPk5+fn7XLKDD1GlUhQUJB8fHzkcDhcpjscjkK9SEBlNGvWLO3YsUOTJk1S7dq1vV1OpeXr66vw8HBJUmxsrA4cOKBVq1bp3nvv9XJllcvBgwd16tQpPfbYY85p+fn52rNnj1avXq358+fLx+fS618hGFUivr6+io2NVVJSknPAb35+vpKSktSzZ08vVwd4jzFGs2fP1rZt2zRx4kTVqVPH2yXhLPn5+crJyfF2GZVOq1at9OKLL7pMe+ONNxQREaHevXtfkqFIIhhVOgkJCZo+fbpiY2MVFxenVatWKTs7W/Hx8d4urdI5c+aMjh8/7nx+4sQJ/fjjjwoMDFRoaKgXK6t8Zs2apc2bN+vRRx9VQECAs1e1WrVqleoUQnkwf/58tWnTRqGhoTpz5ow2b96s3bt364knnvB2aZVOQEBAoXF2VatWVY0aNS7p8XcEo0qmY8eOyszM1KJFi+RwOBQdHa1x48ZxKs0LDhw4oEmTJjmfz507V5LUuXNnjRo1yltlVUpr166VJE2cONFl+v33388fDWXs1KlTmj59uk6ePKlq1aopKipKTzzxRKW5IgreZzPGGG8XAQAAUB5cmicIAQAAPEAwAgAAsBCMAAAALAQjAAAAC8EIAADAQjACAACwEIwAAAAsBCMAldb06dO5mSYAF9z5GkCZOXTokBYvXqwDBw7o1KlTCgwMVGRkpNq1a6cbb7zxomwzIyND69evV/v27RUdHX1RtnExZWdna/ny5WrZsqVatmzp7XKASx7BCECZ+OGHHzRp0iSFhoaqW7duCg4O1i+//KJ9+/Zp1apVFy0YnTx5UkuWLFGdOnUKBaMRI0aovN/8Pzs7W0uWLJEkghFQBghGAMrEhx9+qGrVqunZZ59V9erVXeadOnXKKzX5+vIrEIArvisNQJkYO3asatWqpQkTJpy37aZNm/Txxx8rNTVVfn5+at26tQYPHqzQ0FBnm4kTJ+rXX3/Vgw8+qFmzZmnfvn2qXr26brrpJvXu3VuS9P3337t8UW+Bgi+HnT59unbv3q3p06dLkk6cOKHRo0dr8ODB8vPz08qVK+VwONSsWTONHDlStWvX1gcffKD169fr119/VevWrXX//fcrMDDQZf07d+7U0qVLlZKSIpvNpubNm2vw4MFq0KCBs8306dP15Zdf6tVXX9XMmTP13Xffyc/PT507d9bgwYPl4+PjrOev+vXrpzvuuKN4LzyAC8LgawBlIiwsTAcPHtShQ4fO2e7DDz/U9OnTVa9ePQ0ZMkS9evXSd999pwkTJui3335zaZuVlaUpU6YoKipKf//731W/fn3NmzdPO3fulCTVr1/fGSBuuOEGjR49WqNHj1bz5s3PWcPmzZu1du1a9ezZUwkJCdq9e7defvllvf/++9q1a5d69+6tG264Qd98843mzp3rsuymTZv03HPPyd/fX3feeaduu+02paam6sknn9SJEydc2ubn52vKlCmqUaOG7rrrLrVo0UIrV67U+vXrJUlBQUEaNmyYJKl9+/bO+jt06HCeVxuAp+hHBlAmbr75Zj3zzDN69NFHFRcXp2bNmqlVq1Zq2bKl85RWWlqaFi1apP79++vWW291Ltu+fXs99thjWrNmjcv0kydPavTo0br++uslSV27dtX999+vzz77TG3btlVwcLDatm2rRYsWqUmTJs5255ORkaHXXntN1apVk/RngFm2bJn++OMPPffcc6pSpYokKTMzU5s3b9bw4cNlt9t15swZzZkzR127dtWIESOc6+vcubPGjh2rpUuXukzPycnRNddco379+kmSunfvrscee0yfffaZunfvLn9/f1199dWaOXOmGjZsWOz6AXiOHiMAZeLyyy/X5MmT1a5dO/3000/66KOPNGXKFI0cOVLbt2+XJH311Vcyxqhjx47KzMx0/gsODlZ4eLi+//57l3X6+/vruuuucz739fVVXFxcoZ6ZC3X11Vc7Q5EkNW7cWJJ03XXXOUNRwfTc3FxlZGRIkv773//qt99+U6dOnVzq9/HxUePGjQvVL/0Zhs7WrFkz/fzzzyWqH4Dn6DECUGbi4uL08MMPKzc3Vz/++KO2bdumjz/+WC+99JJeeOEFHT9+XMYYjRkzxu3yfx0sXbt2bdlsNpdp1atX108//VSiOs8eyyTJGZKKml5wiu/YsWOSpKeeesrtegMCAlye2+12BQUFuUyrXr16oVOGAMoOwQhAmSvo2YmLi1NERIRmzJihL774Qvn5+bLZbPrnP/8pH5/CHdr+/v4uz921KQ1Frbeo6QXXsBT8P3r0aAUHBxdqd3Zv07nWB8B7CEYAvCo2NlbSn+OFwsPDZYxRnTp1FBERUSrr/2uP0sVUt25dSVLNmjV1+eWXl8o6y7J+AIwxAlBGkpKS3N5MseAKsoiICLVv314+Pj5asmRJobbGGP36668XvN2qVatKUpmcnmrdurUCAgK0dOlS5ebmFpqfmZl5wessqP/06dMlrg/A+dFjBKBMzJkzR9nZ2Wrfvr0iIiKUm5ur5ORkbd26VWFhYerSpYuqV6+uAQMGaP78+UpLS9NVV10lf39/nThxQl9//bW6deumW2655YK2W7duXVWvXl3r1q1TQECAqlatqsaNG6tOnTqlvo/VqlXT8OHD9frrr+uxxx5Tp06dFBQUpPT0dO3YsUNNmzbVPffcc0Hr9PPzU2RkpLZu3ap69eopMDBQDRo0UMOGDUu9fgAEIwBl5K677tIXX3yhnTt3av369crNzVVoaKi6d++u2267zXk37D59+qhevXr6+OOPtXjxYkl/Dnq+/PLL1a5duwverq+vr0aNGqX58+fr7bffVl5enu6///6LEowk6dprr1WtWrW0bNkyffTRR8rJyVFISIiaN2+uLl26eLTOkSNHavbs2Xr33XeVm5urfv36EYyAi4Q7XwMAAFgYYwQAAGAhGAEAAFgIRgAAABaCEQAAgIVgBAAAYCEYAQAAWAhGAAAAFoIRAACAhWAEAABgIRgBAABYCEYAAAAWghEAAICFYAQAAGD5/94tngfSdjhEAAAAAElFTkSuQmCC"},"metadata":{}}]},{"cell_type":"code","source":"fig, axs = plt.subplots(1, 3, figsize=(12, 3))\nsns.barplot(data=vaders, x='Sentiment', y='pos', ax=axs[0])\nsns.barplot(data=vaders, x='Sentiment', y='neu', ax=axs[1])\nsns.barplot(data=vaders, x='Sentiment', y='neg', ax=axs[2])\naxs[0].set_title('Positive')\naxs[1].set_title('Neutral')\naxs[2].set_title('Negative')\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:21:13.976968Z","iopub.execute_input":"2024-08-31T10:21:13.977534Z","iopub.status.idle":"2024-08-31T10:21:18.347649Z","shell.execute_reply.started":"2024-08-31T10:21:13.977477Z","shell.execute_reply":"2024-08-31T10:21:18.346375Z"},"trusted":true},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x300 with 3 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"test = pd.read_csv('/kaggle/input/sentiment-analysis-on-movie-reviews/test.tsv.zip', \n                 compression='zip', \n                 delimiter='\\t')\n\n# Print the first few rows of the DataFrame\nprint(test.head())","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:21:18.349330Z","iopub.execute_input":"2024-08-31T10:21:18.349777Z","iopub.status.idle":"2024-08-31T10:21:18.479676Z","shell.execute_reply.started":"2024-08-31T10:21:18.349733Z","shell.execute_reply":"2024-08-31T10:21:18.477995Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"   PhraseId  SentenceId                                             Phrase\n0    156061        8545  An intermittently pleasing but mostly routine ...\n1    156062        8545  An intermittently pleasing but mostly routine ...\n2    156063        8545                                                 An\n3    156064        8545  intermittently pleasing but mostly routine effort\n4    156065        8545         intermittently pleasing but mostly routine\n","output_type":"stream"}]},{"cell_type":"code","source":"non_string_rows = test[test['Phrase'].apply(lambda x: not isinstance(x, str))]\nprint(non_string_rows)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:21:18.481805Z","iopub.execute_input":"2024-08-31T10:21:18.482409Z","iopub.status.idle":"2024-08-31T10:21:18.528510Z","shell.execute_reply.started":"2024-08-31T10:21:18.482341Z","shell.execute_reply":"2024-08-31T10:21:18.527202Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"       PhraseId  SentenceId Phrase\n15519    171580        9213    NaN\n","output_type":"stream"}]},{"cell_type":"code","source":"# Run the polarity score on the entire dataset\nrest = {}\nfor i, row in tqdm(test.iterrows(), total=len(test)):\n    try:\n        # Extract the text and ID\n        text = row['Phrase']\n        myid = int(row['PhraseId'])  # Convert to integer if necessary\n\n        # Check if the text is valid\n        if not isinstance(text, str) or pd.isna(text):\n            # Assign default sentiment score if text is not valid\n            rest[myid] = {'neg': 0, 'neu': 0, 'pos': 0, 'compound': 0}\n        else:\n            # Perform sentiment analysis\n            rest[myid] = sia.polarity_scores(text)\n    \n    except Exception as e:\n        # Handle unexpected errors\n        print(f'Error processing row with ID {myid}: {e}')\n        rest[myid] = {'neg': 0, 'neu': 0, 'pos': 0, 'compound': 0}\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:21:18.530334Z","iopub.execute_input":"2024-08-31T10:21:18.530759Z","iopub.status.idle":"2024-08-31T10:21:35.824626Z","shell.execute_reply.started":"2024-08-31T10:21:18.530717Z","shell.execute_reply":"2024-08-31T10:21:35.823267Z"},"trusted":true},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/66292 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4f0fded4576148b99b7cf3a5364e48db"}},"metadata":{}}]},{"cell_type":"code","source":"vadtest = pd.DataFrame(rest).T\nvadtest = vadtest.reset_index().rename(columns={'index': 'PhraseId'})\ntest = vadtest.merge(test, on='PhraseId', how='left')","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:21:35.826417Z","iopub.execute_input":"2024-08-31T10:21:35.826949Z","iopub.status.idle":"2024-08-31T10:21:38.333055Z","shell.execute_reply.started":"2024-08-31T10:21:35.826891Z","shell.execute_reply":"2024-08-31T10:21:38.331792Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:21:38.334507Z","iopub.execute_input":"2024-08-31T10:21:38.334932Z","iopub.status.idle":"2024-08-31T10:21:38.355748Z","shell.execute_reply.started":"2024-08-31T10:21:38.334887Z","shell.execute_reply":"2024-08-31T10:21:38.353578Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"   PhraseId  neg    neu    pos  compound  SentenceId  \\\n0    156061  0.0  0.732  0.268     0.296        8545   \n1    156062  0.0  0.732  0.268     0.296        8545   \n2    156063  0.0  1.000  0.000     0.000        8545   \n3    156064  0.0  0.694  0.306     0.296        8545   \n4    156065  0.0  0.645  0.355     0.296        8545   \n\n                                              Phrase  \n0  An intermittently pleasing but mostly routine ...  \n1  An intermittently pleasing but mostly routine ...  \n2                                                 An  \n3  intermittently pleasing but mostly routine effort  \n4         intermittently pleasing but mostly routine  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PhraseId</th>\n      <th>neg</th>\n      <th>neu</th>\n      <th>pos</th>\n      <th>compound</th>\n      <th>SentenceId</th>\n      <th>Phrase</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>156061</td>\n      <td>0.0</td>\n      <td>0.732</td>\n      <td>0.268</td>\n      <td>0.296</td>\n      <td>8545</td>\n      <td>An intermittently pleasing but mostly routine ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>156062</td>\n      <td>0.0</td>\n      <td>0.732</td>\n      <td>0.268</td>\n      <td>0.296</td>\n      <td>8545</td>\n      <td>An intermittently pleasing but mostly routine ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>156063</td>\n      <td>0.0</td>\n      <td>1.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>8545</td>\n      <td>An</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>156064</td>\n      <td>0.0</td>\n      <td>0.694</td>\n      <td>0.306</td>\n      <td>0.296</td>\n      <td>8545</td>\n      <td>intermittently pleasing but mostly routine effort</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>156065</td>\n      <td>0.0</td>\n      <td>0.645</td>\n      <td>0.355</td>\n      <td>0.296</td>\n      <td>8545</td>\n      <td>intermittently pleasing but mostly routine</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report, accuracy_score","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:21:38.357826Z","iopub.execute_input":"2024-08-31T10:21:38.358576Z","iopub.status.idle":"2024-08-31T10:21:38.588928Z","shell.execute_reply.started":"2024-08-31T10:21:38.358517Z","shell.execute_reply":"2024-08-31T10:21:38.587563Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"pip install optuna","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:21:38.590659Z","iopub.execute_input":"2024-08-31T10:21:38.591174Z","iopub.status.idle":"2024-08-31T10:21:57.592059Z","shell.execute_reply.started":"2024-08-31T10:21:38.591117Z","shell.execute_reply":"2024-08-31T10:21:57.590222Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"Requirement already satisfied: optuna in /opt/conda/lib/python3.10/site-packages (3.6.1)\nRequirement already satisfied: alembic>=1.5.0 in /opt/conda/lib/python3.10/site-packages (from optuna) (1.13.2)\nRequirement already satisfied: colorlog in /opt/conda/lib/python3.10/site-packages (from optuna) (6.8.2)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from optuna) (1.26.4)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from optuna) (21.3)\nRequirement already satisfied: sqlalchemy>=1.3.0 in /opt/conda/lib/python3.10/site-packages (from optuna) (2.0.30)\nRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from optuna) (4.66.4)\nRequirement already satisfied: PyYAML in /opt/conda/lib/python3.10/site-packages (from optuna) (6.0.2)\nRequirement already satisfied: Mako in /opt/conda/lib/python3.10/site-packages (from alembic>=1.5.0->optuna) (1.3.5)\nRequirement already satisfied: typing-extensions>=4 in /opt/conda/lib/python3.10/site-packages (from alembic>=1.5.0->optuna) (4.12.2)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->optuna) (3.1.2)\nRequirement already satisfied: greenlet!=0.4.17 in /opt/conda/lib/python3.10/site-packages (from sqlalchemy>=1.3.0->optuna) (3.0.3)\nRequirement already satisfied: MarkupSafe>=0.9.2 in /opt/conda/lib/python3.10/site-packages (from Mako->alembic>=1.5.0->optuna) (2.1.5)\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"# Import libraries\nimport pandas as pd\nimport optuna\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom optuna.samplers import TPESampler\n\n# Ensure vaders and test data are loaded correctly (replace with your data loading)\n# vaders = pd.read_csv('vaders_data.csv')  # Adjust path as needed\n# test = pd.read_csv('test_data.csv')  # Adjust path as needed\n\nX_train = vaders[['compound']]\ny_train = vaders['Sentiment']\n\n# Split the data for validation\nX_train_split, X_val_split, y_train_split, y_val_split = train_test_split(\n    X_train, y_train, test_size=0.2, random_state=42)\n\n# Define the objective function for Optuna\ndef objective(trial):\n    n_neighbors = trial.suggest_int('n_neighbors', 3, 15)\n    weights = trial.suggest_categorical('weights', ['uniform', 'distance'])\n    algorithm = trial.suggest_categorical('algorithm', ['auto', 'ball_tree', 'kd_tree', 'brute'])\n\n\n    model = KNeighborsClassifier(n_neighbors=n_neighbors, weights=weights, algorithm=algorithm)\n\n    # Perform cross-validation\n    kf = KFold(n_splits=5, shuffle=True, random_state=42)\n    score = cross_val_score(model, X_train_split, y_train_split, cv=kf, scoring='accuracy').mean()\n\n    return score\n\n# Set up Optuna study\nstudy = optuna.create_study(direction='maximize', sampler=TPESampler())\nstudy.optimize(objective, n_trials=50)  # Adjust n_trials as needed\n\nprint('Best Parameters:', study.best_params)\nprint('Best Score:', study.best_value)\n\n# Train the best model\nbest_params = study.best_params\nbest_model = KNeighborsClassifier(**best_params)\nbest_model.fit(X_train, y_train)\n\n# Evaluate the model\ny_val_pred = best_model.predict(X_val_split)\nprint(f'Validation Accuracy: {accuracy_score(y_val_split, y_val_pred)}')\nprint(classification_report(y_val_split, y_val_pred))\n\n# Predict sentiments for the test data\nX_test = test[['compound']]\ny_test_pred = best_model.predict(X_test)\ntest['Predicted_Sentiment'] = y_test_pred\n","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:24:16.251741Z","iopub.execute_input":"2024-08-31T10:24:16.252250Z","iopub.status.idle":"2024-08-31T10:50:45.267778Z","shell.execute_reply.started":"2024-08-31T10:24:16.252173Z","shell.execute_reply":"2024-08-31T10:50:45.266235Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stderr","text":"[I 2024-08-31 10:24:16,516] A new study created in memory with name: no-name-9e176fe8-5787-45df-9b4d-0bc62ec20b33\n[I 2024-08-31 10:24:49,355] Trial 0 finished with value: 0.5379661832334088 and parameters: {'n_neighbors': 11, 'weights': 'uniform', 'algorithm': 'brute'}. Best is trial 0 with value: 0.5379661832334088.\n[I 2024-08-31 10:25:14,091] Trial 1 finished with value: 0.5278578510641141 and parameters: {'n_neighbors': 5, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 0 with value: 0.5379661832334088.\n[I 2024-08-31 10:25:40,441] Trial 2 finished with value: 0.4116258691815095 and parameters: {'n_neighbors': 4, 'weights': 'distance', 'algorithm': 'kd_tree'}. Best is trial 0 with value: 0.5379661832334088.\n[I 2024-08-31 10:26:06,924] Trial 3 finished with value: 0.5384948576924213 and parameters: {'n_neighbors': 11, 'weights': 'distance', 'algorithm': 'kd_tree'}. Best is trial 3 with value: 0.5384948576924213.\n[I 2024-08-31 10:26:33,329] Trial 4 finished with value: 0.5303970117980337 and parameters: {'n_neighbors': 6, 'weights': 'distance', 'algorithm': 'kd_tree'}. Best is trial 3 with value: 0.5384948576924213.\n[I 2024-08-31 10:26:59,763] Trial 5 finished with value: 0.4116258691815095 and parameters: {'n_neighbors': 4, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 3 with value: 0.5384948576924213.\n[I 2024-08-31 10:27:26,290] Trial 6 finished with value: 0.5431725609679912 and parameters: {'n_neighbors': 13, 'weights': 'distance', 'algorithm': 'kd_tree'}. Best is trial 6 with value: 0.5431725609679912.\n[I 2024-08-31 10:27:52,687] Trial 7 finished with value: 0.5329441038726226 and parameters: {'n_neighbors': 7, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 6 with value: 0.5431725609679912.\n[I 2024-08-31 10:28:27,585] Trial 8 finished with value: 0.5431805712210895 and parameters: {'n_neighbors': 13, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 8 with value: 0.5431805712210895.\n[I 2024-08-31 10:28:51,622] Trial 9 finished with value: 0.5434528575946789 and parameters: {'n_neighbors': 13, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 9 with value: 0.5434528575946789.\n[I 2024-08-31 10:29:23,953] Trial 10 finished with value: 0.540449212209363 and parameters: {'n_neighbors': 15, 'weights': 'uniform', 'algorithm': 'brute'}. Best is trial 9 with value: 0.5434528575946789.\n[I 2024-08-31 10:30:06,747] Trial 11 finished with value: 0.5401768911912926 and parameters: {'n_neighbors': 15, 'weights': 'uniform', 'algorithm': 'ball_tree'}. Best is trial 9 with value: 0.5434528575946789.\n[I 2024-08-31 10:30:41,996] Trial 12 finished with value: 0.5393999524568656 and parameters: {'n_neighbors': 10, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 9 with value: 0.5434528575946789.\n[I 2024-08-31 10:31:17,306] Trial 13 finished with value: 0.5431805712210895 and parameters: {'n_neighbors': 13, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 9 with value: 0.5434528575946789.\n[I 2024-08-31 10:32:00,045] Trial 14 finished with value: 0.5389274026986094 and parameters: {'n_neighbors': 13, 'weights': 'uniform', 'algorithm': 'ball_tree'}. Best is trial 9 with value: 0.5434528575946789.\n[I 2024-08-31 10:32:24,725] Trial 15 finished with value: 0.5389914844026136 and parameters: {'n_neighbors': 9, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 9 with value: 0.5434528575946789.\n[I 2024-08-31 10:32:59,633] Trial 16 finished with value: 0.5362040889052445 and parameters: {'n_neighbors': 8, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 9 with value: 0.5434528575946789.\n[I 2024-08-31 10:33:24,447] Trial 17 finished with value: 0.5424276192987915 and parameters: {'n_neighbors': 12, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 9 with value: 0.5434528575946789.\n[I 2024-08-31 10:33:58,999] Trial 18 finished with value: 0.5395280581240722 and parameters: {'n_neighbors': 14, 'weights': 'uniform', 'algorithm': 'auto'}. Best is trial 9 with value: 0.5434528575946789.\n[I 2024-08-31 10:34:34,182] Trial 19 finished with value: 0.5393999524568656 and parameters: {'n_neighbors': 10, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 9 with value: 0.5434528575946789.\n[I 2024-08-31 10:34:59,083] Trial 20 finished with value: 0.5424276192987915 and parameters: {'n_neighbors': 12, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 9 with value: 0.5434528575946789.\n[I 2024-08-31 10:35:34,433] Trial 21 finished with value: 0.5431805712210895 and parameters: {'n_neighbors': 13, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 9 with value: 0.5434528575946789.\n[I 2024-08-31 10:36:10,175] Trial 22 finished with value: 0.5441657027561594 and parameters: {'n_neighbors': 14, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 22 with value: 0.5441657027561594.\n[I 2024-08-31 10:36:45,557] Trial 23 finished with value: 0.5451909894901636 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 23 with value: 0.5451909894901636.\n[I 2024-08-31 10:37:20,884] Trial 24 finished with value: 0.5451909894901636 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 23 with value: 0.5451909894901636.\n[I 2024-08-31 10:37:56,149] Trial 25 finished with value: 0.5451909894901636 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 23 with value: 0.5451909894901636.\n[I 2024-08-31 10:38:39,455] Trial 26 finished with value: 0.5401768911912926 and parameters: {'n_neighbors': 15, 'weights': 'uniform', 'algorithm': 'ball_tree'}. Best is trial 23 with value: 0.5451909894901636.\n[I 2024-08-31 10:39:14,571] Trial 27 finished with value: 0.5451909894901636 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 23 with value: 0.5451909894901636.\n[I 2024-08-31 10:39:49,365] Trial 28 finished with value: 0.5441657027561594 and parameters: {'n_neighbors': 14, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 23 with value: 0.5451909894901636.\n[I 2024-08-31 10:40:31,927] Trial 29 finished with value: 0.5342657160798493 and parameters: {'n_neighbors': 11, 'weights': 'uniform', 'algorithm': 'ball_tree'}. Best is trial 23 with value: 0.5451909894901636.\n[I 2024-08-31 10:41:06,979] Trial 30 finished with value: 0.5441657027561594 and parameters: {'n_neighbors': 14, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 23 with value: 0.5451909894901636.\n[I 2024-08-31 10:41:42,138] Trial 31 finished with value: 0.5451909894901636 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 23 with value: 0.5451909894901636.\n[I 2024-08-31 10:42:17,349] Trial 32 finished with value: 0.5451909894901636 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 23 with value: 0.5451909894901636.\n[I 2024-08-31 10:42:52,765] Trial 33 finished with value: 0.5441657027561594 and parameters: {'n_neighbors': 14, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 23 with value: 0.5451909894901636.\n[I 2024-08-31 10:43:27,970] Trial 34 finished with value: 0.5415385408703749 and parameters: {'n_neighbors': 12, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 23 with value: 0.5451909894901636.\n[I 2024-08-31 10:43:54,217] Trial 35 finished with value: 0.449801670771797 and parameters: {'n_neighbors': 3, 'weights': 'distance', 'algorithm': 'kd_tree'}. Best is trial 23 with value: 0.5451909894901636.\n[I 2024-08-31 10:44:20,898] Trial 36 finished with value: 0.5451989987809153 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 36 with value: 0.5451989987809153.\n[I 2024-08-31 10:44:47,367] Trial 37 finished with value: 0.5441576928238433 and parameters: {'n_neighbors': 14, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 36 with value: 0.5451989987809153.\n[I 2024-08-31 10:45:13,437] Trial 38 finished with value: 0.5384948576924213 and parameters: {'n_neighbors': 11, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 36 with value: 0.5451989987809153.\n[I 2024-08-31 10:45:39,570] Trial 39 finished with value: 0.5303970117980337 and parameters: {'n_neighbors': 6, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 36 with value: 0.5451989987809153.\n[I 2024-08-31 10:46:05,871] Trial 40 finished with value: 0.5451989987809153 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 36 with value: 0.5451989987809153.\n[I 2024-08-31 10:46:32,234] Trial 41 finished with value: 0.5451989987809153 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 36 with value: 0.5451989987809153.\n[I 2024-08-31 10:46:58,704] Trial 42 finished with value: 0.5441576928238433 and parameters: {'n_neighbors': 14, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 36 with value: 0.5451989987809153.\n[I 2024-08-31 10:47:25,198] Trial 43 finished with value: 0.5451989987809153 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 36 with value: 0.5451989987809153.\n[I 2024-08-31 10:47:51,710] Trial 44 finished with value: 0.5415225210057427 and parameters: {'n_neighbors': 12, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 36 with value: 0.5451989987809153.\n[I 2024-08-31 10:48:18,315] Trial 45 finished with value: 0.5441576928238433 and parameters: {'n_neighbors': 14, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 36 with value: 0.5451989987809153.\n[I 2024-08-31 10:48:52,525] Trial 46 finished with value: 0.5402009216298053 and parameters: {'n_neighbors': 15, 'weights': 'uniform', 'algorithm': 'auto'}. Best is trial 36 with value: 0.5451989987809153.\n[I 2024-08-31 10:49:19,181] Trial 47 finished with value: 0.5431725609679912 and parameters: {'n_neighbors': 13, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 36 with value: 0.5451989987809153.\n[I 2024-08-31 10:49:45,555] Trial 48 finished with value: 0.5431725609679912 and parameters: {'n_neighbors': 13, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 36 with value: 0.5451989987809153.\n[I 2024-08-31 10:50:11,900] Trial 49 finished with value: 0.5451989987809153 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 36 with value: 0.5451989987809153.\n","output_type":"stream"},{"name":"stdout","text":"Best Parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'auto'}\nBest Score: 0.5451989987809153\nValidation Accuracy: 0.5306933230808664\n              precision    recall  f1-score   support\n\n           0       0.47      0.11      0.17      1416\n           1       0.38      0.26      0.31      5527\n           2       0.59      0.82      0.69     15639\n           3       0.43      0.28      0.34      6707\n           4       0.25      0.12      0.16      1923\n\n    accuracy                           0.53     31212\n   macro avg       0.42      0.32      0.33     31212\nweighted avg       0.49      0.53      0.49     31212\n\n","output_type":"stream"}]},{"cell_type":"code","source":"output = test[['PhraseId', 'Predicted_Sentiment']].rename(columns={'Predicted_Sentiment': 'Sentiment'})\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:51:59.191776Z","iopub.execute_input":"2024-08-31T10:51:59.192219Z","iopub.status.idle":"2024-08-31T10:51:59.201010Z","shell.execute_reply.started":"2024-08-31T10:51:59.192161Z","shell.execute_reply":"2024-08-31T10:51:59.199810Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"# Calculate sentiment counts\nsentiment_counts = test['Predicted_Sentiment'].value_counts()\n\n# Ensure the sentiment scores are in order from 0 to 4\n# Assuming sentiment scores range from 0 to 4\nsentiment_counts = sentiment_counts.reindex([0, 1, 2, 3, 4], fill_value=0)\n\n# Create a bar chart\nplt.figure(figsize=(8, 6))\nsentiment_counts.plot(kind='bar', color=['green', 'blue', 'yellow', 'orange', 'red'])\nplt.title('Sentiment Distribution in Text Data')\nplt.xlabel('Sentiment')\nplt.ylabel('Count')\nplt.xticks(rotation=0)  # Rotate x-axis labels for better readability\nplt.grid(axis='y', linestyle='--', alpha=0.7)\n\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:53:02.593973Z","iopub.execute_input":"2024-08-31T10:53:02.594566Z","iopub.status.idle":"2024-08-31T10:53:02.893549Z","shell.execute_reply.started":"2024-08-31T10:53:02.594518Z","shell.execute_reply":"2024-08-31T10:53:02.892459Z"},"trusted":true},"execution_count":36,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Save to CSV\noutput.to_csv('test_predictions1.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T10:53:35.674359Z","iopub.execute_input":"2024-08-31T10:53:35.674834Z","iopub.status.idle":"2024-08-31T10:53:35.775286Z","shell.execute_reply.started":"2024-08-31T10:53:35.674790Z","shell.execute_reply":"2024-08-31T10:53:35.774066Z"},"trusted":true},"execution_count":38,"outputs":[]}]}