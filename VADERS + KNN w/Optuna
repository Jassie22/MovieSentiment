{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cd6918f5",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-08-31T11:14:27.510968Z",
     "iopub.status.busy": "2024-08-31T11:14:27.510581Z",
     "iopub.status.idle": "2024-08-31T11:14:28.280377Z",
     "shell.execute_reply": "2024-08-31T11:14:28.279497Z"
    },
    "papermill": {
     "duration": 0.781261,
     "end_time": "2024-08-31T11:14:28.282486",
     "exception": false,
     "start_time": "2024-08-31T11:14:27.501225",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/sentiment-analysis-on-movie-reviews/sampleSubmission.csv\n",
      "/kaggle/input/sentiment-analysis-on-movie-reviews/train.tsv.zip\n",
      "/kaggle/input/sentiment-analysis-on-movie-reviews/test.tsv.zip\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cef1325b",
   "metadata": {
    "papermill": {
     "duration": 0.007123,
     "end_time": "2024-08-31T11:14:28.297204",
     "exception": false,
     "start_time": "2024-08-31T11:14:28.290081",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**VANDER**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3233179f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:14:28.313487Z",
     "iopub.status.busy": "2024-08-31T11:14:28.312997Z",
     "iopub.status.idle": "2024-08-31T11:14:30.474553Z",
     "shell.execute_reply": "2024-08-31T11:14:30.473643Z"
    },
    "papermill": {
     "duration": 2.172413,
     "end_time": "2024-08-31T11:14:30.476916",
     "exception": false,
     "start_time": "2024-08-31T11:14:28.304503",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "plt.style.use('ggplot')\n",
    "\n",
    "import nltk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "34d892ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:14:30.493469Z",
     "iopub.status.busy": "2024-08-31T11:14:30.492993Z",
     "iopub.status.idle": "2024-08-31T11:14:30.746112Z",
     "shell.execute_reply": "2024-08-31T11:14:30.745181Z"
    },
    "papermill": {
     "duration": 0.263669,
     "end_time": "2024-08-31T11:14:30.748484",
     "exception": false,
     "start_time": "2024-08-31T11:14:30.484815",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   PhraseId  SentenceId                                             Phrase  \\\n",
      "0         1           1  A series of escapades demonstrating the adage ...   \n",
      "1         2           1  A series of escapades demonstrating the adage ...   \n",
      "2         3           1                                           A series   \n",
      "3         4           1                                                  A   \n",
      "4         5           1                                             series   \n",
      "\n",
      "   Sentiment  \n",
      "0          1  \n",
      "1          2  \n",
      "2          2  \n",
      "3          2  \n",
      "4          2  \n"
     ]
    }
   ],
   "source": [
    "# Read in data\n",
    "# Read the .tsv file inside the .zip directly\n",
    "df = pd.read_csv('/kaggle/input/sentiment-analysis-on-movie-reviews/train.tsv.zip', \n",
    "                 compression='zip', \n",
    "                 delimiter='\\t')\n",
    "\n",
    "# Print the first few rows of the DataFrame\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df8aab3f",
   "metadata": {
    "papermill": {
     "duration": 0.007136,
     "end_time": "2024-08-31T11:14:30.763418",
     "exception": false,
     "start_time": "2024-08-31T11:14:30.756282",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**EDA**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d5958e3b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:14:30.779691Z",
     "iopub.status.busy": "2024-08-31T11:14:30.779325Z",
     "iopub.status.idle": "2024-08-31T11:14:31.101276Z",
     "shell.execute_reply": "2024-08-31T11:14:31.100290Z"
    },
    "papermill": {
     "duration": 0.332522,
     "end_time": "2024-08-31T11:14:31.103303",
     "exception": false,
     "start_time": "2024-08-31T11:14:30.770781",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = df['Sentiment'].value_counts().sort_index() \\\n",
    "    .plot(kind='bar',\n",
    "          title='Sentiment',\n",
    "          figsize=(10, 5))\n",
    "ax.set_xlabel('Review Stars')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3ce26864",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:14:31.121350Z",
     "iopub.status.busy": "2024-08-31T11:14:31.120490Z",
     "iopub.status.idle": "2024-08-31T11:14:31.125943Z",
     "shell.execute_reply": "2024-08-31T11:14:31.124984Z"
    },
    "papermill": {
     "duration": 0.01665,
     "end_time": "2024-08-31T11:14:31.127890",
     "exception": false,
     "start_time": "2024-08-31T11:14:31.111240",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A series of escapades demonstrating the adage that what is good for the goose\n"
     ]
    }
   ],
   "source": [
    "example = df['Phrase'][1]\n",
    "print(example)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c635fe53",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:14:31.144814Z",
     "iopub.status.busy": "2024-08-31T11:14:31.144505Z",
     "iopub.status.idle": "2024-08-31T11:14:31.287263Z",
     "shell.execute_reply": "2024-08-31T11:14:31.286320Z"
    },
    "papermill": {
     "duration": 0.153609,
     "end_time": "2024-08-31T11:14:31.289406",
     "exception": false,
     "start_time": "2024-08-31T11:14:31.135797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('A', 'DT'),\n",
       " ('series', 'NN'),\n",
       " ('of', 'IN'),\n",
       " ('escapades', 'NNS'),\n",
       " ('demonstrating', 'VBG'),\n",
       " ('the', 'DT'),\n",
       " ('adage', 'NN'),\n",
       " ('that', 'IN'),\n",
       " ('what', 'WP'),\n",
       " ('is', 'VBZ')]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tokens = nltk.word_tokenize(example)\n",
    "tagged = nltk.pos_tag(tokens)\n",
    "tokens[:10]\n",
    "tagged[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "997c86c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:14:31.307750Z",
     "iopub.status.busy": "2024-08-31T11:14:31.306910Z",
     "iopub.status.idle": "2024-08-31T11:14:31.431353Z",
     "shell.execute_reply": "2024-08-31T11:14:31.430239Z"
    },
    "papermill": {
     "duration": 0.136309,
     "end_time": "2024-08-31T11:14:31.433928",
     "exception": false,
     "start_time": "2024-08-31T11:14:31.297619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(S\n",
      "  A/DT\n",
      "  series/NN\n",
      "  of/IN\n",
      "  escapades/NNS\n",
      "  demonstrating/VBG\n",
      "  the/DT\n",
      "  adage/NN\n",
      "  that/IN\n",
      "  what/WP\n",
      "  is/VBZ\n",
      "  good/JJ\n",
      "  for/IN\n",
      "  the/DT\n",
      "  goose/NN)\n"
     ]
    }
   ],
   "source": [
    "entities = nltk.chunk.ne_chunk(tagged)\n",
    "entities.pprint()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "320c39e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:14:31.451662Z",
     "iopub.status.busy": "2024-08-31T11:14:31.451333Z",
     "iopub.status.idle": "2024-08-31T11:14:31.489136Z",
     "shell.execute_reply": "2024-08-31T11:14:31.488222Z"
    },
    "papermill": {
     "duration": 0.04916,
     "end_time": "2024-08-31T11:14:31.491341",
     "exception": false,
     "start_time": "2024-08-31T11:14:31.442181",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/nltk/twitter/__init__.py:20: UserWarning: The twython library has not been installed. Some functionality from the twitter package will not be available.\n",
      "  warnings.warn(\"The twython library has not been installed. \"\n"
     ]
    }
   ],
   "source": [
    "from nltk.sentiment import SentimentIntensityAnalyzer\n",
    "from tqdm.notebook import tqdm\n",
    "\n",
    "sia = SentimentIntensityAnalyzer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "aa54e26e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:14:31.508828Z",
     "iopub.status.busy": "2024-08-31T11:14:31.508524Z",
     "iopub.status.idle": "2024-08-31T11:15:05.626451Z",
     "shell.execute_reply": "2024-08-31T11:15:05.625506Z"
    },
    "papermill": {
     "duration": 34.129023,
     "end_time": "2024-08-31T11:15:05.628503",
     "exception": false,
     "start_time": "2024-08-31T11:14:31.499480",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a444e2ef23434186a7e4dd3c87e43467",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/156060 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24/2851595402.py:5: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  myid = row[0]\n"
     ]
    }
   ],
   "source": [
    "# Run the polarity score on the entire dataset\n",
    "res = {}\n",
    "for i, row in tqdm(df.iterrows(), total=len(df)):\n",
    "    text = row['Phrase']\n",
    "    myid = row[0]\n",
    "    res[myid] = sia.polarity_scores(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f4120ce3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:15:05.646677Z",
     "iopub.status.busy": "2024-08-31T11:15:05.646375Z",
     "iopub.status.idle": "2024-08-31T11:15:10.050153Z",
     "shell.execute_reply": "2024-08-31T11:15:10.049354Z"
    },
    "papermill": {
     "duration": 4.415368,
     "end_time": "2024-08-31T11:15:10.052432",
     "exception": false,
     "start_time": "2024-08-31T11:15:05.637064",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "vaders = pd.DataFrame(res).T\n",
    "vaders = vaders.reset_index().rename(columns={'index': 'PhraseId'})\n",
    "vaders = vaders.merge(df, on='PhraseId', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c070ae64",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:15:10.070848Z",
     "iopub.status.busy": "2024-08-31T11:15:10.070497Z",
     "iopub.status.idle": "2024-08-31T11:15:10.086840Z",
     "shell.execute_reply": "2024-08-31T11:15:10.085925Z"
    },
    "papermill": {
     "duration": 0.027785,
     "end_time": "2024-08-31T11:15:10.088769",
     "exception": false,
     "start_time": "2024-08-31T11:15:10.060984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PhraseId</th>\n",
       "      <th>neg</th>\n",
       "      <th>neu</th>\n",
       "      <th>pos</th>\n",
       "      <th>compound</th>\n",
       "      <th>SentenceId</th>\n",
       "      <th>Phrase</th>\n",
       "      <th>Sentiment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.843</td>\n",
       "      <td>0.157</td>\n",
       "      <td>0.5579</td>\n",
       "      <td>1</td>\n",
       "      <td>A series of escapades demonstrating the adage ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.805</td>\n",
       "      <td>0.195</td>\n",
       "      <td>0.4404</td>\n",
       "      <td>1</td>\n",
       "      <td>A series of escapades demonstrating the adage ...</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>A series</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>series</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PhraseId  neg    neu    pos  compound  SentenceId  \\\n",
       "0         1  0.0  0.843  0.157    0.5579           1   \n",
       "1         2  0.0  0.805  0.195    0.4404           1   \n",
       "2         3  0.0  1.000  0.000    0.0000           1   \n",
       "3         4  0.0  0.000  0.000    0.0000           1   \n",
       "4         5  0.0  1.000  0.000    0.0000           1   \n",
       "\n",
       "                                              Phrase  Sentiment  \n",
       "0  A series of escapades demonstrating the adage ...          1  \n",
       "1  A series of escapades demonstrating the adage ...          2  \n",
       "2                                           A series          2  \n",
       "3                                                  A          2  \n",
       "4                                             series          2  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now we have sentiment score and metadata\n",
    "vaders.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cb8e0c70",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:15:10.108670Z",
     "iopub.status.busy": "2024-08-31T11:15:10.107770Z",
     "iopub.status.idle": "2024-08-31T11:15:11.317602Z",
     "shell.execute_reply": "2024-08-31T11:15:11.316665Z"
    },
    "papermill": {
     "duration": 1.221877,
     "end_time": "2024-08-31T11:15:11.319637",
     "exception": false,
     "start_time": "2024-08-31T11:15:10.097760",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.barplot(data=vaders, x='Sentiment', y='compound')\n",
    "ax.set_title('Compund Score by Sentiment Score')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "388b6f1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:15:11.339570Z",
     "iopub.status.busy": "2024-08-31T11:15:11.339233Z",
     "iopub.status.idle": "2024-08-31T11:15:14.937961Z",
     "shell.execute_reply": "2024-08-31T11:15:14.937061Z"
    },
    "papermill": {
     "duration": 3.610962,
     "end_time": "2024-08-31T11:15:14.939934",
     "exception": false,
     "start_time": "2024-08-31T11:15:11.328972",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABJ0AAAEiCAYAAABTFKNAAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABQUklEQVR4nO3de1xU5d738e9MA4IoIp5AzUEED3mbWWqpmQfKyKg8UJkdbFuUW83q7rB3epu0k8rtrqyk7srS7MmUfEJFzTKzzEPmaZdoRaampiiIA3kixlnPHz7MdmIQgRlmYD7v18tXs9a61rV+F+j8mt9c61omwzAMAQAAAAAAAB5k9nUAAAAAAAAAqHsoOgEAAAAAAMDjKDoBAAAAAADA4yg6AQAAAAAAwOMoOgEAAAAAAMDjKDoBAAAAAADA4yg6AQAAAAAAwOMoOgEAAAAAAMDjKDoBAAAAAADA4yg6ATXoyy+/lMlkUmpqaqXOi4mJUUxMjFdiAgDgfObMmSOTyaQ5c+b4OhQAgJf0799fJpPJ12GgDqLohIBhMplc/lx00UVq2rSpBg4cqHnz5vk0Nt7kAcB/lOYJq9Wq06dPu20TExMjk8kku91ew9Gdja9///41fl0ACCT+ngsq695775XJZNLevXt9HQoCjMXXAQA1bcqUKZKkkpIS/fjjj1q8eLFWr16tzZs366WXXvLqtXv27KkffvhBTZs2rdR5q1at8lJEAIDy7Nu3TzNmzNDf//53X4cCAPCRQMkFc+fO1cmTJ30dBuogik4IOH++tW3VqlW67rrrNGPGDE2YMMGrt7HVr19fHTt2rPR57dq180I0AIDyNG7cWCaTSS+88ILuv//+Sn9ZAACo/QIpF7Rp08bXIaCO4vY6BLyEhAR17NhRhmFo06ZNzv1btmzR8OHD1bx5c9WrV09Wq1Vjx47VoUOHyvRx+PBhPf744+rQoYPCwsIUERGhDh066N5779Xu3bud7f68ptPevXtlMpn01VdfSXK9BfDcWyf+vKbTCy+8IJPJpFdeecXtmA4ePCiLxaLu3bu77Lfb7Xr99dd11VVXKTw8XPXr11e3bt00c+ZMORyOyv7oAKDOql+/viZPnqzCwkI988wzlTp348aNSk5OVlRUlIKDg3XxxRfrwQcf1MGDB8u0Pd+afampqTKZTPryyy8l/WdtJUn66quvXHLGn/PKvffeq5ycHN1+++1q3ry5zGazs58tW7bo4YcfVteuXRUZGamQkBDFx8frscce07Fjxyo1VgCoy2oqF0jSpk2bNGjQIDVs2FDh4eG69tprtWHDhjK5oNSiRYt01113qX379goLC1NYWJiuuOIKvfrqq2X+v95kMum9996TJLVt29aZO87NP39e7mP+/PkymUx69NFH3cZbXFysxo0bKzo6uszthR9++KEGDBigiIgIhYSEqFOnTpo6daqKi4sv9MeHOoSZToAkwzAkyflGu3TpUg0fPlyGYSg5OVlWq1VbtmzRG2+8ocWLF2vt2rVq27atJOnkyZPq06ePfvnlF1133XW66aabZBiGfv31Vy1evFjJycmKjY11e92IiAhNmTJFc+bM0a+//uq89U/SeWdc3X333Zo0aZLmzp2rhx9+uMzx//N//o/OnDmje++917mvpKREN910kz799FN16NBBI0eOVEhIiFavXq2HHnpIGzdu1Pvvv1/ZHx0A1Fnjxo3TzJkz9eabb2rChAmKj4+v8Jx3331XDzzwgOrVq6ebb75ZF198sX7++WfNmjVLWVlZ+uabb6r8bfJll12mKVOm6JlnnpHVanV5j//zGk+//PKLrrzySrVv31533nmnTp06pfDwcEnS22+/rczMTPXr10/XXnutHA6HtmzZopdeekmffPKJNm7cqIYNG1YpRgCoa2oiF6xZs0aDBg3SmTNnNGzYMLVr107bt2/XgAEDNHDgQLfX+Pvf/y6z2awrr7xSrVq1UmFhob744gs9/PDD2rRpk8v/10+ZMkWLFi3Sd999p4cfflgRERGS5PyvO0OGDFGjRo00b948TZ8+XRaLa+lg8eLFstlseuyxx1yOjR49WrNnz1br1q01fPhwRURE6JtvvtHkyZO1atUqrVy5skxfqOMMIEBIMtz9lV+5cqVhMpkMk8lk7N271/j999+NyMhIw2w2G2vWrHFp+8ILLxiSjOuuu865b8mSJYYk45FHHinTd3FxsVFUVOTcXr16tSHJmDJliku7fv36uY2tlNVqNaxWq8u+QYMGGZKM7du3l2l/ySWXGMHBwUZ+fr5z35QpUwxJxvjx4w273e7cb7fbjdGjRxuSjEWLFpUbAwAECklGq1atDMMwjI8++siQZAwdOtSljdVqNSQZJSUlzn0//fSTERQUZLRr1844cOCA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MZLKfrFy5MgRjRs3rkp9AkAg8XQu6NOnj9q1a6fVq1frk08+cWn71ltvue2jvPfybdu26fnnn3cbd3U+b5Su3fTOO+/oww8/VNOmTZWUlFSm3X//93/rjz/+0OjRo93O1j127Jhz/VwEDtZ0Av6kQYMGevfdd3XrrbeqX79+uvXWW9WmTRtt2bJFn332maKiovTmm286269cuVJPPPGEevXqpfbt26t58+Y6cOCAFi9eLLPZrCeeeKLCayYkJOijjz7SsGHDNHjwYIWGhspqteruu++u8Ny7775bTz/9tKZMmaKSkpIy3zqUmjx5sr777jv97//+r7KysjRw4EC1atVKR44c0c8//6x169YpLS1Nl1xyyYX/sAAggERGRmrixIl68skn3R7v2LGj3n33XY0ePVqdO3dWYmKi2rdvr5KSEu3bt09ff/21mjVrph9//NF5zkMPPaTZs2frr3/9q1atWqWLL75Y//73v7VhwwYlJSVp6dKlZa6TkJCg+fPn66abbtLll1+uoKAgXXPNNbrmmmsqHEOPHj3Up08fffzxx+rdu7euvvpqHT58WJ988ok6dOigli1bVv0HBAABwNO5wGw2a9asWUpMTNTNN9+s4cOHq127dvr++++1cuVK3XDDDfrkk09kNv9nvsg999yj6dOn65FHHtHq1asVHx+vn3/+WUuXLtWwYcO0YMGCMnElJCRo+vTpSklJ0fDhw9WwYUNFRERo/PjxFY556NChCg8P14wZM1RSUqKHHnrI7Zq1o0eP1pYtW/T666+rXbt2uv7669WmTRsVFBRoz549WrNmjf7yl7/of//3fy/0x426wAAChCSjMn/lv/32W2PIkCFG06ZNjaCgIOPiiy82xowZY/z2228u7Xbu3Gk8+uijxhVXXGE0bdrUCA4ONqxWqzF8+HBj3bp1Lm1Xr15tSDKmTJnist9utxtPPfWU0bZtW8NisRiSjH79+jmPW61Ww2q1lhtrQkKCIcmwWCxGbm5uue0cDocxd+5cY+DAgUbjxo2NoKAgo2XLlkafPn2MtLQ0Y9++fRf88wGAukqS0apVK7fHTp8+bcTExDhzSklJSZk233//vTFq1CijTZs2RnBwsNG4cWOjc+fOxgMPPGCsWrWqTPuvv/7a6Nu3rxEaGmo0bNjQGDx4sPHdd98ZU6ZMMSQZq1evdml/+PBh4447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17Jly5SWlqYZM2aoUaNGZdrv3LlTffr0UYcOHRQUFKTFixdr6tSpeumll/ggAwA+lpqaWu6xLVu26K233tI999xTcwEBAGrciBEjNH36dI0bN05XX321zOazK3w4HA6tWbNG77//vsaNG6f4+Hh99dVXevPNNzVv3jyNGTPGx5EDAKqrWms62Ww2l9vnvv32W8XGxurqq69W69atlZCQoF27dlWqz6VLlyohIUEDBgxQ69atlZKSouDgYK1evdpt+wkTJuj6669XTEyMWrVqpTFjxsgwDG3fvr06QwMAeNkVV1yhvn37as6cOb4OBQDgRe+//7769++va665xllwkiSz2az+/furf//+eu+992QymdS/f38NGDBA27Zt82HEAABPqVbRqV69ejp58qQk6cyZM9q5c6e6du3qPB4SEuI8fiHsdrt2796tLl26/CdAs1ldunRRTk7OBfVRXFwsu92uBg0aXPB1AQC+0aJFC/3yyy++DgMA4EW//vrredd5bdasmX799VfndmxsrI4fP14ToQEAvKxat9fFxsZq1apV6ty5szZv3qxTp06pe/fuzuOHDx92e0tceYqKiuRwOBQREeGyPyIiQgcPHrygPj744ANFRka6FK7OVVJSopKSEue2yWRSaGio8zWAuiOQ/03XhrGfOXNGGzZsUMOGDX0dCgDAixo3bqyNGzdq0KBBLjOdpLO32G3YsMHl//9///13vkAGgDqiWkWnESNGKC0tTX//+98lSVdeeaXLAt7ffvutOnToUL0IK2HRokVat26dUlNTFRwc7LZNZmamFi5c6Nxu27atpk2bxlP2gDooOjq6Uu1zd3opEB+o7Ni95fXXX3e7/+TJk/r5559ls9lY0wkA6rgbb7xRs2fP1uTJk5WQkKCoqChJUm5urlatWqVdu3bpL3/5i7P9N998o3bt2vkqXACAB1Wr6NSuXTvNmDFDP/30k8LCwnTJJZc4j504cULXX3+9y76KhIeHy2w2y2azuey32WxlZj/92ZIlS5xPurBareW2Gzp0qJKSkpzbpbMB8vLyZLfbLzhWAP7v0KFDlWrv/3ODLpy7sVsslhovsO/YsaPMPpPJpLCwMHXo0EEJCQkut2UDAOqexMREmc1mLViwQG+++abLsQYNGugvf/mLEhMTJZ29K2HUqFF8IQwAdUS1ik7S2UJRjx49yuwPCwvT4MGDKxeMxaLY2FhlZ2erZ8+eks5Ouc3OznYmIncWL16sjz/+WJMmTarwW5GgoCAFBQW5PWYYRqXiBeDfKvtvui4Vnfzl/Sw9Pd3XIQAA/MCgQYM0cOBA/fLLL8rPz5d0di2n2NhYWSz/+UgSFBRUqS+tAQD+rdpFJ0nauXOntm7dqry8PElnE8jll19epYSRlJSk9PR0xcbGKi4uTsuXL1dxcbH69+8vSZo5c6YiIyM1cuRISWdvqcvIyNCECRPUvHlz5yypkJAQhYSEeGJ4AAAAAKrJYrGoQ4cONbr8BgDAt6pVdLLb7ZoxY4Y2bdokSapfv76ks2t1ZGVlqWfPnnr44Yddvr2oSO/evVVUVKSMjAzZbDbFxMRo4sSJztvr8vPzXRbIXblypex2u1566SWXfpKTk3XbbbdVZ3gAAA84efKkPvvsM+3YsUOFhYV64IEHFBcXp+PHj+vLL79U9+7dnet7AADqJnIBAASmahWdPvroI23atEk33XSTkpKSnIWhwsJCZWVlKSsrSwsXLtSIESMq1W9iYmK5t9Olpqa6bHPrBgD4r6NHjyo1NVX5+fmKjo7Wb7/9ptOnT0s6u47HypUrlZeX57KALACgbiEXAEDgMlfcpHxr165Vv379dNddd7ks9N2oUSPddddduuaaa/T1119XN0YAQC31/vvv69SpU5o+fXqZLw0kqUePHtq+fXvNBwYAqDHkAgAIXNUqOtlsNsXFxZV7PD4+vsyT6AAAgeP777/XDTfcoNatW7vcGl2qRYsWOnr0qA8iAwDUFHIBAASuahWdIiMjtXPnznKP79y5U5GRkdW5BACgFvvjjz8UHh5e7vFTp07VYDQAAF8gFwBA4KpW0alfv37asGGD3nrrLR08eFAOh0MOh0MHDx7U22+/rQ0bNjifOgcACDytW7fWDz/8UO7xTZs2KSYmpuYCAgDUOHIBAASuai0kPmzYMB0+fFirVq3SqlWrZDafrWE5HA5JZ4tSQ4cOrX6UAIBaafDgwUpPT1ebNm3Uq1cvSWdzRG5urj766CPl5OToscce83GUAABvIhcAQOCqVtHJbDZr3LhxSkpK0rZt25SXlydJatasmbp16yar1eqRIAEAtdM111yj/Px8LViwQPPnz5ckPffcczIMQ2azWXfccYd69uzp4ygBAN5ELgCAwFWtolMpk8nk/HPuNgAAw4YNU9++fbVx40bl5ubKMAy1aNFCV155pVq0aFHlflesWKGsrCzZbDZZrVaNHj36vA+3KLVu3Tq98sor6t69u5588skqXx8AcOG8lQsAAP6tWkWnkpISvfXWW1qzZo0kOQtNhmFo3rx56tu3r8aMGSOLxSO1LQBALdWsWTNde+21On78uMv+/Px8SVLTpk0r1d/69es1d+5cpaSkKD4+XsuWLVNaWppmzJihRo0alXvekSNH9P7776tTp06VHwQAoFo8nQsAAP6vWtWgDz74QGvWrNGgQYN0ww03qEWLFjKZTMrNzdXy5cu1cuVKNWjQQPfee6+HwgUA1CZ//PGHFi5cqC+++EK///57ue0WLFhQqX6XLl2qhIQEDRgwQJKUkpKirVu3avXq1RoyZIjbcxwOh1577TXddttt+uGHH3TixIlKXRMAUDXeygUAAP9XraLT119/rb59++q+++5z2d+yZUvdf//9OnXqlL7++muKTgAQoGbNmqWvvvpKPXr0UKdOnRQWFlbtPu12u3bv3u1SXDKbzerSpYtycnLKPW/hwoUKDw/XwIEDz/sUJensTN6SkhLntslkUmhoqPN1XVWXx1aRQB67FNjjZ+ze541cAACoHapVdLLb7Wrfvn25xzt06KAtW7ZU5xIAgFrs22+/VUJCgh544AGP9VlUVCSHw6GIiAiX/RERETp48KDbc3788Ud98cUX+uc//3lB18jMzNTChQud223bttW0adPUrFkzt+3dX7X2iY6O9nUIPlO1sdeV3zy/+8rI3emlQHygpn7v3sgFAIDaoVpFp65du+rf//63Bg0a5Pb4v//9b1166aXVuQQAoBYzmUxq27atT2M4deqUXnvtNT344IMKDw+/oHOGDh2qpKQk53bpbIC8vDzZ7XavxOkPDh065OsQfCaQxy4F9vgrO/a6NC/K3dgtFku5Bfaq8odcAADwjWoVnUaMGKGXX35Z//rXv3T99dcrKipK0tkE9umnnyovL0+PPvpomcUCGzRoUJ3LAgBqie7du2v79u267rrrPNZneHi4zGazbDaby36bzVZm9pMkHT58WHl5eZo2bZpzn2EYks7msRkzZjjzV6mgoCAFBQW5vX7puXVRXR5bRQJ57FJgj7+yY69LRaea+r17IxcAAGqHahWdHn30UUnSvn37tGnTpvO2OReLBAJAYBg+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QPWZDH8vkwKV9Mgjj6hx48aaMmVKhW3XrFmjZcuW6cCBAwoODlbXrl111113qWnTps42qamp+v333/Xoo4/qnXfe0c8//6ywsDANHjxYt9xyiyRpx44deuaZZ8r0P3bsWPXv31/p6enauXOn0tPTJUlHjhzR+PHjdddddyk4OFhLly6VzWZTx44dNWbMGDVp0kT/9//+X33++ef6/fff1bVrV40dO1YNGjRw6X/btm3KzMzUnj17ZDKZ1KlTJ9111126+OKLnW3S09P1zTff6JVXXtGsWbO0fft2BQcHq1+/frrrrrtkNpud8fxZcnKybrvttgv7wQNALUKuIFcAQEXIFeQKVB8LiaPOadasmXbv3q19+/adt93HH3+s9PR0RUdHa9SoUbrxxhu1fft2TZkyRSdOnHBpe/z4caWlpclqteqee+5Rq1at9MEHH2jbtm2SpFatWjnfRK+99lqNHz9e48ePV6dOnc4bw9q1a/XZZ58pMTFRSUlJ2rlzp15++WXNnz9f3333nW655RZde+212rJli+bOnety7po1a/TCCy8oJCREd955p4YPH64DBw7o6aef1pEjR1zaOhwOpaWlqWHDhrr77rt1ySWXaOnSpfr8888lSeHh4br//vslST179nTGf+WVV1bw0waA2olcQa4AgIqQK8gVqD7m5qHOuemmm/Tcc8/pySefVFxcnDp27KguXbqoc+fOzumoeXl5ysjI0O23365hw4Y5z+3Zs6f+9re/6dNPP3XZf+zYMY0fP17XXHONJGngwIEaO3asvvjiC3Xr1k0RERHq1q2bMjIy1L59e2e7ihQUFOjVV19V/fr1JZ19E1+0aJH++OMPvfDCC7roooskSUVFRVq7dq1SUlIUFBSk06dPa/bs2Ro4cKAefPBBZ3/9+vXTI488oszMTJf9JSUl6tWrl5KTkyVJgwYN0t/+9jd98cUXGjRokEJCQnTVVVdp1qxZatOmzQXHDwC1FbmCXAEAFSFXkCtQfcx0Qp1z6aWXaurUqerevbt+/fVXLVmyRGlpaRozZow2b94sSdq4caMMw1Dv3r1VVFTk/BMREaGoqCjt2LHDpc+QkBD17dvXuW2xWBQXF1em8l9ZV111lTMxSFJ8fLwkqW/fvs7EULrfbreroKBAkvT999/rxIkT6tOnj0v8ZrNZ8fHxZeKXziaEc3Xs2FGHDx+uVvwAUFuRK8gVAFARcgW5AtXHTCfUSXFxcXr88cdlt9u1d+9effvtt1q2bJlefPFFTZ8+Xbm5uTIMQxMmTHB7/p8X6GvSpIlMJpPLvrCwMP3666/VivPce7wlORNFeftLp+ceOnRIkvSPf/zDbb+hoaEu20FBQQoPD3fZFxYWVma6LwAEEnIFuQIAKkKuIFegeig6oU4r/eYgLi5OLVu21Ouvv64NGzbI4XDIZDLpqaeektlcdsJfSEiIy7a7Np5QXr/l7S9d97/0v+PHj1dERESZdud+m3G+/gAA5IqK+gMAkCsq6g8oD0UnBIzY2FhJZ++jjoqKkmEYat68uVq2bOmR/v/8jYU3tWjRQpLUqFEjXXrppR7psybjBwB/Ra44P3IFAJArKkKuwLkoU6LOyc7Odlbsz1X6RIiWLVuqZ8+eMpvNWrhwYZm2hmHo999/r/R169WrJ0k1MrW0a9euCg0NVWZmpux2e5njRUVFle6zNP6TJ09WOz4A8HfkCnIFAFSEXEGuQPUx0wl1zuzZs1VcXKyePXuqZcuWstvtysnJ0fr169WsWTMNGDBAYWFhGjFihObNm6e8vDz16NFDISEhOnLkiDZt2qSEhATdfPPNlbpuixYtFBYWppUrVyo0NFT16tVTfHy8mjdv7vEx1q9fXykpKXrttdf0t7/9TX369FF4eLjy8/O1detWdejQQffdd1+l+gwODlbr1q21fv16RUdHq0GDBrr44ovVpk0bj8cPAL5GriBXAEBFyBXkClQfRSfUOXfffbc2bNigbdu26fPPP5fdblfTpk01aNAgDR8+XGFhYZKkIUOGKDo6WsuWLdNHH30k6exCe5deeqm6d+9e6etaLBaNGzdO8+bN09tvv60zZ85o7NixXkkOknT11VercePGWrRokZYsWaKSkhJFRkaqU6dOGjBgQJX6HDNmjN5991299957stvtSk5OJjkAqJPIFeQKAKgIuYJcgeozGe7mCwIAAAAAAADVwJpOAAAAAAAA8DiKTgAAAAAAAPA4ik4AAAAAAADwOIpOAAAAAAAA8DiKTgAAAAAAAPA4ik4AAAAAAADwOIpOAAAAAAAA8DiKTgAAAAAAAPA4ik4AAAAAAADwOIpOAAAAAAAA8DiKTgAAAAAAAPA4ik4AAAAAAADwOIpOAAAAAAAA8Lj/B3VNnphSmmfSAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1200x300 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axs = plt.subplots(1, 3, figsize=(12, 3))\n",
    "sns.barplot(data=vaders, x='Sentiment', y='pos', ax=axs[0])\n",
    "sns.barplot(data=vaders, x='Sentiment', y='neu', ax=axs[1])\n",
    "sns.barplot(data=vaders, x='Sentiment', y='neg', ax=axs[2])\n",
    "axs[0].set_title('Positive')\n",
    "axs[1].set_title('Neutral')\n",
    "axs[2].set_title('Negative')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "df26a278",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:15:14.960793Z",
     "iopub.status.busy": "2024-08-31T11:15:14.960407Z",
     "iopub.status.idle": "2024-08-31T11:15:15.062139Z",
     "shell.execute_reply": "2024-08-31T11:15:15.061120Z"
    },
    "papermill": {
     "duration": 0.115162,
     "end_time": "2024-08-31T11:15:15.064725",
     "exception": false,
     "start_time": "2024-08-31T11:15:14.949563",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   PhraseId  SentenceId                                             Phrase\n",
      "0    156061        8545  An intermittently pleasing but mostly routine ...\n",
      "1    156062        8545  An intermittently pleasing but mostly routine ...\n",
      "2    156063        8545                                                 An\n",
      "3    156064        8545  intermittently pleasing but mostly routine effort\n",
      "4    156065        8545         intermittently pleasing but mostly routine\n"
     ]
    }
   ],
   "source": [
    "test = pd.read_csv('/kaggle/input/sentiment-analysis-on-movie-reviews/test.tsv.zip', \n",
    "                 compression='zip', \n",
    "                 delimiter='\\t')\n",
    "\n",
    "# Print the first few rows of the DataFrame\n",
    "print(test.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e5683b43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:15:15.087206Z",
     "iopub.status.busy": "2024-08-31T11:15:15.086353Z",
     "iopub.status.idle": "2024-08-31T11:15:15.118131Z",
     "shell.execute_reply": "2024-08-31T11:15:15.117069Z"
    },
    "papermill": {
     "duration": 0.044906,
     "end_time": "2024-08-31T11:15:15.120072",
     "exception": false,
     "start_time": "2024-08-31T11:15:15.075166",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       PhraseId  SentenceId Phrase\n",
      "15519    171580        9213    NaN\n"
     ]
    }
   ],
   "source": [
    "non_string_rows = test[test['Phrase'].apply(lambda x: not isinstance(x, str))]\n",
    "print(non_string_rows)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5cca7b74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:15:15.140538Z",
     "iopub.status.busy": "2024-08-31T11:15:15.140211Z",
     "iopub.status.idle": "2024-08-31T11:15:28.109636Z",
     "shell.execute_reply": "2024-08-31T11:15:28.108662Z"
    },
    "papermill": {
     "duration": 12.982541,
     "end_time": "2024-08-31T11:15:28.112174",
     "exception": false,
     "start_time": "2024-08-31T11:15:15.129633",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c91ed55fe0bb45a6b7362c2c286250ae",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/66292 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Run the polarity score on the entire dataset\n",
    "rest = {}\n",
    "for i, row in tqdm(test.iterrows(), total=len(test)):\n",
    "    try:\n",
    "        # Extract the text and ID\n",
    "        text = row['Phrase']\n",
    "        myid = int(row['PhraseId'])  # Convert to integer if necessary\n",
    "\n",
    "        # Check if the text is valid\n",
    "        if not isinstance(text, str) or pd.isna(text):\n",
    "            # Assign default sentiment score if text is not valid\n",
    "            rest[myid] = {'neg': 0, 'neu': 0, 'pos': 0, 'compound': 0}\n",
    "        else:\n",
    "            # Perform sentiment analysis\n",
    "            rest[myid] = sia.polarity_scores(text)\n",
    "    \n",
    "    except Exception as e:\n",
    "        # Handle unexpected errors\n",
    "        print(f'Error processing row with ID {myid}: {e}')\n",
    "        rest[myid] = {'neg': 0, 'neu': 0, 'pos': 0, 'compound': 0}\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3071480f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:15:28.133747Z",
     "iopub.status.busy": "2024-08-31T11:15:28.133367Z",
     "iopub.status.idle": "2024-08-31T11:15:30.082339Z",
     "shell.execute_reply": "2024-08-31T11:15:30.081314Z"
    },
    "papermill": {
     "duration": 1.962181,
     "end_time": "2024-08-31T11:15:30.084621",
     "exception": false,
     "start_time": "2024-08-31T11:15:28.122440",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "vadtest = pd.DataFrame(rest).T\n",
    "vadtest = vadtest.reset_index().rename(columns={'index': 'PhraseId'})\n",
    "test = vadtest.merge(test, on='PhraseId', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4f502baa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:15:30.105740Z",
     "iopub.status.busy": "2024-08-31T11:15:30.105384Z",
     "iopub.status.idle": "2024-08-31T11:15:30.118525Z",
     "shell.execute_reply": "2024-08-31T11:15:30.117670Z"
    },
    "papermill": {
     "duration": 0.025593,
     "end_time": "2024-08-31T11:15:30.120353",
     "exception": false,
     "start_time": "2024-08-31T11:15:30.094760",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PhraseId</th>\n",
       "      <th>neg</th>\n",
       "      <th>neu</th>\n",
       "      <th>pos</th>\n",
       "      <th>compound</th>\n",
       "      <th>SentenceId</th>\n",
       "      <th>Phrase</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>156061</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.732</td>\n",
       "      <td>0.268</td>\n",
       "      <td>0.296</td>\n",
       "      <td>8545</td>\n",
       "      <td>An intermittently pleasing but mostly routine ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>156062</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.732</td>\n",
       "      <td>0.268</td>\n",
       "      <td>0.296</td>\n",
       "      <td>8545</td>\n",
       "      <td>An intermittently pleasing but mostly routine ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>156063</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>8545</td>\n",
       "      <td>An</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>156064</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.694</td>\n",
       "      <td>0.306</td>\n",
       "      <td>0.296</td>\n",
       "      <td>8545</td>\n",
       "      <td>intermittently pleasing but mostly routine effort</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>156065</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.645</td>\n",
       "      <td>0.355</td>\n",
       "      <td>0.296</td>\n",
       "      <td>8545</td>\n",
       "      <td>intermittently pleasing but mostly routine</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PhraseId  neg    neu    pos  compound  SentenceId  \\\n",
       "0    156061  0.0  0.732  0.268     0.296        8545   \n",
       "1    156062  0.0  0.732  0.268     0.296        8545   \n",
       "2    156063  0.0  1.000  0.000     0.000        8545   \n",
       "3    156064  0.0  0.694  0.306     0.296        8545   \n",
       "4    156065  0.0  0.645  0.355     0.296        8545   \n",
       "\n",
       "                                              Phrase  \n",
       "0  An intermittently pleasing but mostly routine ...  \n",
       "1  An intermittently pleasing but mostly routine ...  \n",
       "2                                                 An  \n",
       "3  intermittently pleasing but mostly routine effort  \n",
       "4         intermittently pleasing but mostly routine  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d9fc9c62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:15:30.141721Z",
     "iopub.status.busy": "2024-08-31T11:15:30.141417Z",
     "iopub.status.idle": "2024-08-31T11:15:30.263985Z",
     "shell.execute_reply": "2024-08-31T11:15:30.262971Z"
    },
    "papermill": {
     "duration": 0.135698,
     "end_time": "2024-08-31T11:15:30.266365",
     "exception": false,
     "start_time": "2024-08-31T11:15:30.130667",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split, KFold, cross_val_score, GridSearchCV\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.metrics import classification_report, accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "457b9120",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:15:30.287941Z",
     "iopub.status.busy": "2024-08-31T11:15:30.287594Z",
     "iopub.status.idle": "2024-08-31T11:15:44.336343Z",
     "shell.execute_reply": "2024-08-31T11:15:44.335147Z"
    },
    "papermill": {
     "duration": 14.062036,
     "end_time": "2024-08-31T11:15:44.338702",
     "exception": false,
     "start_time": "2024-08-31T11:15:30.276666",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: optuna in /opt/conda/lib/python3.10/site-packages (3.6.1)\r\n",
      "Requirement already satisfied: alembic>=1.5.0 in /opt/conda/lib/python3.10/site-packages (from optuna) (1.13.2)\r\n",
      "Requirement already satisfied: colorlog in /opt/conda/lib/python3.10/site-packages (from optuna) (6.8.2)\r\n",
      "Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from optuna) (1.26.4)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from optuna) (21.3)\r\n",
      "Requirement already satisfied: sqlalchemy>=1.3.0 in /opt/conda/lib/python3.10/site-packages (from optuna) (2.0.30)\r\n",
      "Requirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from optuna) (4.66.4)\r\n",
      "Requirement already satisfied: PyYAML in /opt/conda/lib/python3.10/site-packages (from optuna) (6.0.2)\r\n",
      "Requirement already satisfied: Mako in /opt/conda/lib/python3.10/site-packages (from alembic>=1.5.0->optuna) (1.3.5)\r\n",
      "Requirement already satisfied: typing-extensions>=4 in /opt/conda/lib/python3.10/site-packages (from alembic>=1.5.0->optuna) (4.12.2)\r\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->optuna) (3.1.2)\r\n",
      "Requirement already satisfied: greenlet!=0.4.17 in /opt/conda/lib/python3.10/site-packages (from sqlalchemy>=1.3.0->optuna) (3.0.3)\r\n",
      "Requirement already satisfied: MarkupSafe>=0.9.2 in /opt/conda/lib/python3.10/site-packages (from Mako->alembic>=1.5.0->optuna) (2.1.5)\r\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install optuna"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "08736612",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:15:44.361626Z",
     "iopub.status.busy": "2024-08-31T11:15:44.361232Z",
     "iopub.status.idle": "2024-08-31T11:35:19.274564Z",
     "shell.execute_reply": "2024-08-31T11:35:19.273516Z"
    },
    "papermill": {
     "duration": 1174.927626,
     "end_time": "2024-08-31T11:35:19.276964",
     "exception": false,
     "start_time": "2024-08-31T11:15:44.349338",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2024-08-31 11:15:44,505] A new study created in memory with name: no-name-ce3b0e06-e203-4840-acea-aca5d3058332\n",
      "[I 2024-08-31 11:16:10,783] Trial 0 finished with value: 0.5251665859819159 and parameters: {'n_neighbors': 5, 'weights': 'uniform', 'algorithm': 'brute'}. Best is trial 0 with value: 0.5251665859819159.\n",
      "[I 2024-08-31 11:16:31,344] Trial 1 finished with value: 0.545543410152177 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:16:59,480] Trial 2 finished with value: 0.44979366148104544 and parameters: {'n_neighbors': 3, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:17:20,886] Trial 3 finished with value: 0.4116258691815095 and parameters: {'n_neighbors': 4, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:17:49,784] Trial 4 finished with value: 0.5341776093906304 and parameters: {'n_neighbors': 11, 'weights': 'uniform', 'algorithm': 'kd_tree'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:18:17,891] Trial 5 finished with value: 0.540361102633104 and parameters: {'n_neighbors': 14, 'weights': 'uniform', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:18:39,656] Trial 6 finished with value: 0.5393759229806995 and parameters: {'n_neighbors': 10, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:19:01,656] Trial 7 finished with value: 0.5297001582723491 and parameters: {'n_neighbors': 5, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:19:37,080] Trial 8 finished with value: 0.5295239509887735 and parameters: {'n_neighbors': 7, 'weights': 'uniform', 'algorithm': 'ball_tree'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:19:58,423] Trial 9 finished with value: 0.3470681984467307 and parameters: {'n_neighbors': 4, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:20:20,347] Trial 10 finished with value: 0.5451989987809153 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'kd_tree'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:20:42,325] Trial 11 finished with value: 0.5451989987809153 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'kd_tree'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:21:03,946] Trial 12 finished with value: 0.5431725609679912 and parameters: {'n_neighbors': 13, 'weights': 'distance', 'algorithm': 'kd_tree'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:21:24,668] Trial 13 finished with value: 0.5424276192987915 and parameters: {'n_neighbors': 12, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:21:46,456] Trial 14 finished with value: 0.5451989987809153 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'kd_tree'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:22:06,405] Trial 15 finished with value: 0.5342897404234995 and parameters: {'n_neighbors': 8, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:22:28,037] Trial 16 finished with value: 0.5431725609679912 and parameters: {'n_neighbors': 13, 'weights': 'distance', 'algorithm': 'kd_tree'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:22:56,388] Trial 17 finished with value: 0.5393999524568656 and parameters: {'n_neighbors': 10, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:23:23,006] Trial 18 finished with value: 0.540449212209363 and parameters: {'n_neighbors': 15, 'weights': 'uniform', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:23:44,553] Trial 19 finished with value: 0.5431725609679912 and parameters: {'n_neighbors': 13, 'weights': 'distance', 'algorithm': 'kd_tree'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:24:05,083] Trial 20 finished with value: 0.5419069756229403 and parameters: {'n_neighbors': 11, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:24:26,824] Trial 21 finished with value: 0.5451989987809153 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'kd_tree'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:24:48,474] Trial 22 finished with value: 0.5441576928238433 and parameters: {'n_neighbors': 14, 'weights': 'distance', 'algorithm': 'kd_tree'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:25:10,198] Trial 23 finished with value: 0.5441576928238433 and parameters: {'n_neighbors': 14, 'weights': 'distance', 'algorithm': 'kd_tree'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:25:31,919] Trial 24 finished with value: 0.5415225210057427 and parameters: {'n_neighbors': 12, 'weights': 'distance', 'algorithm': 'kd_tree'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:25:53,723] Trial 25 finished with value: 0.5451989987809153 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'kd_tree'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:26:15,416] Trial 26 finished with value: 0.5441576928238433 and parameters: {'n_neighbors': 14, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:26:50,266] Trial 27 finished with value: 0.5371411935662056 and parameters: {'n_neighbors': 12, 'weights': 'uniform', 'algorithm': 'ball_tree'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:27:11,833] Trial 28 finished with value: 0.5329441038726226 and parameters: {'n_neighbors': 7, 'weights': 'distance', 'algorithm': 'kd_tree'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:27:39,492] Trial 29 finished with value: 0.5393198358114644 and parameters: {'n_neighbors': 13, 'weights': 'uniform', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:28:00,019] Trial 30 finished with value: 0.545543410152177 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:28:21,163] Trial 31 finished with value: 0.545543410152177 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:28:42,365] Trial 32 finished with value: 0.5449426774181964 and parameters: {'n_neighbors': 14, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:29:02,677] Trial 33 finished with value: 0.545543410152177 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:29:23,607] Trial 34 finished with value: 0.5449426774181964 and parameters: {'n_neighbors': 14, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:29:44,655] Trial 35 finished with value: 0.5434528575946789 and parameters: {'n_neighbors': 13, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:30:11,471] Trial 36 finished with value: 0.5379661832334088 and parameters: {'n_neighbors': 11, 'weights': 'uniform', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:30:32,830] Trial 37 finished with value: 0.545543410152177 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:30:53,972] Trial 38 finished with value: 0.5424276192987915 and parameters: {'n_neighbors': 12, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:31:20,757] Trial 39 finished with value: 0.540361102633104 and parameters: {'n_neighbors': 14, 'weights': 'uniform', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:31:40,463] Trial 40 finished with value: 0.5377819705084684 and parameters: {'n_neighbors': 10, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:32:01,127] Trial 41 finished with value: 0.545543410152177 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:32:21,260] Trial 42 finished with value: 0.545543410152177 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:32:42,967] Trial 43 finished with value: 0.5441576928238433 and parameters: {'n_neighbors': 14, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:33:03,753] Trial 44 finished with value: 0.545543410152177 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:33:23,554] Trial 45 finished with value: 0.3344608491942905 and parameters: {'n_neighbors': 3, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:33:43,971] Trial 46 finished with value: 0.5280981541661119 and parameters: {'n_neighbors': 6, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:34:12,447] Trial 47 finished with value: 0.5431805712210895 and parameters: {'n_neighbors': 13, 'weights': 'distance', 'algorithm': 'ball_tree'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:34:32,962] Trial 48 finished with value: 0.5449426774181964 and parameters: {'n_neighbors': 14, 'weights': 'distance', 'algorithm': 'brute'}. Best is trial 1 with value: 0.545543410152177.\n",
      "[I 2024-08-31 11:34:54,584] Trial 49 finished with value: 0.5451989987809153 and parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'auto'}. Best is trial 1 with value: 0.545543410152177.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Parameters: {'n_neighbors': 15, 'weights': 'distance', 'algorithm': 'brute'}\n",
      "Best Score: 0.545543410152177\n",
      "Validation Accuracy: 0.5290272971933871\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.46      0.10      0.16      1416\n",
      "           1       0.34      0.24      0.28      5527\n",
      "           2       0.59      0.84      0.69     15639\n",
      "           3       0.45      0.25      0.32      6707\n",
      "           4       0.28      0.13      0.18      1923\n",
      "\n",
      "    accuracy                           0.53     31212\n",
      "   macro avg       0.42      0.31      0.33     31212\n",
      "weighted avg       0.49      0.53      0.48     31212\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Import libraries\n",
    "import pandas as pd\n",
    "import optuna\n",
    "from sklearn.model_selection import train_test_split, KFold, cross_val_score\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import classification_report, accuracy_score\n",
    "from optuna.samplers import TPESampler\n",
    "\n",
    "# Ensure vaders and test data are loaded correctly (replace with your data loading)\n",
    "# vaders = pd.read_csv('vaders_data.csv')  # Adjust path as needed\n",
    "# test = pd.read_csv('test_data.csv')  # Adjust path as needed\n",
    "\n",
    "X_train = vaders[['compound']]\n",
    "y_train = vaders['Sentiment']\n",
    "\n",
    "# Split the data for validation\n",
    "X_train_split, X_val_split, y_train_split, y_val_split = train_test_split(\n",
    "    X_train, y_train, test_size=0.2, random_state=42)\n",
    "\n",
    "# Define the objective function for Optuna\n",
    "def objective(trial):\n",
    "    n_neighbors = trial.suggest_int('n_neighbors', 3, 15)\n",
    "    weights = trial.suggest_categorical('weights', ['uniform', 'distance'])\n",
    "    algorithm = trial.suggest_categorical('algorithm', ['auto', 'ball_tree', 'kd_tree', 'brute'])\n",
    "\n",
    "\n",
    "    model = KNeighborsClassifier(n_neighbors=n_neighbors, weights=weights, algorithm=algorithm)\n",
    "\n",
    "    # Perform cross-validation\n",
    "    kf = KFold(n_splits=5, shuffle=True, random_state=42)\n",
    "    score = cross_val_score(model, X_train_split, y_train_split, cv=kf, scoring='accuracy').mean()\n",
    "\n",
    "    return score\n",
    "\n",
    "# Set up Optuna study\n",
    "study = optuna.create_study(direction='maximize', sampler=TPESampler())\n",
    "study.optimize(objective, n_trials=50)  # Adjust n_trials as needed\n",
    "\n",
    "print('Best Parameters:', study.best_params)\n",
    "print('Best Score:', study.best_value)\n",
    "\n",
    "# Train the best model\n",
    "best_params = study.best_params\n",
    "best_model = KNeighborsClassifier(**best_params)\n",
    "best_model.fit(X_train, y_train)\n",
    "\n",
    "# Evaluate the model\n",
    "y_val_pred = best_model.predict(X_val_split)\n",
    "print(f'Validation Accuracy: {accuracy_score(y_val_split, y_val_pred)}')\n",
    "print(classification_report(y_val_split, y_val_pred))\n",
    "\n",
    "# Predict sentiments for the test data\n",
    "X_test = test[['compound']]\n",
    "y_test_pred = best_model.predict(X_test)\n",
    "test['Predicted_Sentiment'] = y_test_pred\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "529f9832",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:35:19.307893Z",
     "iopub.status.busy": "2024-08-31T11:35:19.307524Z",
     "iopub.status.idle": "2024-08-31T11:35:19.315795Z",
     "shell.execute_reply": "2024-08-31T11:35:19.315074Z"
    },
    "papermill": {
     "duration": 0.026016,
     "end_time": "2024-08-31T11:35:19.317739",
     "exception": false,
     "start_time": "2024-08-31T11:35:19.291723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "output = test[['PhraseId', 'Predicted_Sentiment']].rename(columns={'Predicted_Sentiment': 'Sentiment'})\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "050e6eab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:35:19.347788Z",
     "iopub.status.busy": "2024-08-31T11:35:19.347491Z",
     "iopub.status.idle": "2024-08-31T11:35:19.540214Z",
     "shell.execute_reply": "2024-08-31T11:35:19.539167Z"
    },
    "papermill": {
     "duration": 0.210455,
     "end_time": "2024-08-31T11:35:19.542799",
     "exception": false,
     "start_time": "2024-08-31T11:35:19.332344",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate sentiment counts\n",
    "sentiment_counts = test['Predicted_Sentiment'].value_counts()\n",
    "\n",
    "# Ensure the sentiment scores are in order from 0 to 4\n",
    "# Assuming sentiment scores range from 0 to 4\n",
    "sentiment_counts = sentiment_counts.reindex([0, 1, 2, 3, 4], fill_value=0)\n",
    "\n",
    "# Create a bar chart\n",
    "plt.figure(figsize=(8, 6))\n",
    "sentiment_counts.plot(kind='bar', color=['green', 'blue', 'yellow', 'orange', 'red'])\n",
    "plt.title('Sentiment Distribution in Text Data')\n",
    "plt.xlabel('Sentiment')\n",
    "plt.ylabel('Count')\n",
    "plt.xticks(rotation=0)  # Rotate x-axis labels for better readability\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "fe6cea9b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-31T11:35:19.576153Z",
     "iopub.status.busy": "2024-08-31T11:35:19.575760Z",
     "iopub.status.idle": "2024-08-31T11:35:19.661734Z",
     "shell.execute_reply": "2024-08-31T11:35:19.660970Z"
    },
    "papermill": {
     "duration": 0.104277,
     "end_time": "2024-08-31T11:35:19.663790",
     "exception": false,
     "start_time": "2024-08-31T11:35:19.559513",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Save to CSV\n",
    "output.to_csv('test_predictions1.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 32092,
     "sourceId": 3810,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1255.735215,
   "end_time": "2024-08-31T11:35:20.501980",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-31T11:14:24.766765",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0b46d555a6224ba19acff1b81dedb9db": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_68732aae97704e15a55bfac7725bb6b7",
       "placeholder": "​",
       "style": "IPY_MODEL_a74836ddaa4e4f979f82774703ad79f3",
       "value": " 66292/66292 [00:12&lt;00:00, 5081.75it/s]"
      }
     },
     "17209d7754c84bca88fdcb944e490c78": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1c32f9206f404db3af1bf6517fe0e4d6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "206b276ac8974918ad45f0238de30e59": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "21608495956f4e69acf4d5931c781ed9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "22fb84515628498bb857b0f3bc18e609": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "23e3c3e91334429f82a4f6a5be1a47e6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_3e97b9eb493d4171a698c684946b6798",
       "placeholder": "​",
       "style": "IPY_MODEL_a54d0619908d4525887e6c8a03c681e7",
       "value": "100%"
      }
     },
     "3e97b9eb493d4171a698c684946b6798": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5511d84d40da41bb9cb8b371e6b6029a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_206b276ac8974918ad45f0238de30e59",
       "placeholder": "​",
       "style": "IPY_MODEL_d26d827e811241a298490cae1ef4eadf",
       "value": " 156060/156060 [00:34&lt;00:00, 4561.76it/s]"
      }
     },
     "558feb78ea87410abd98beb5b45254d7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_22fb84515628498bb857b0f3bc18e609",
       "max": 156060.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_21608495956f4e69acf4d5931c781ed9",
       "value": 156060.0
      }
     },
     "68732aae97704e15a55bfac7725bb6b7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7602dcb20fa1479c8bbde2ee75b2ae7c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_17209d7754c84bca88fdcb944e490c78",
       "max": 66292.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d59e3cccf18b448b9c1c442517e890d1",
       "value": 66292.0
      }
     },
     "8f7853111fd64229ab7d6014e1212191": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a444e2ef23434186a7e4dd3c87e43467": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_23e3c3e91334429f82a4f6a5be1a47e6",
        "IPY_MODEL_558feb78ea87410abd98beb5b45254d7",
        "IPY_MODEL_5511d84d40da41bb9cb8b371e6b6029a"
       ],
       "layout": "IPY_MODEL_8f7853111fd64229ab7d6014e1212191"
      }
     },
     "a54d0619908d4525887e6c8a03c681e7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "a74836ddaa4e4f979f82774703ad79f3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "b573accd7f20430f8db170abfc0dd5ef": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "c91ed55fe0bb45a6b7362c2c286250ae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ea61e99cd02644a082c228de801712ea",
        "IPY_MODEL_7602dcb20fa1479c8bbde2ee75b2ae7c",
        "IPY_MODEL_0b46d555a6224ba19acff1b81dedb9db"
       ],
       "layout": "IPY_MODEL_f3dfa8e8dc3945baa1e8aa49716b72fa"
      }
     },
     "d26d827e811241a298490cae1ef4eadf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "d59e3cccf18b448b9c1c442517e890d1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ea61e99cd02644a082c228de801712ea": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_1c32f9206f404db3af1bf6517fe0e4d6",
       "placeholder": "​",
       "style": "IPY_MODEL_b573accd7f20430f8db170abfc0dd5ef",
       "value": "100%"
      }
     },
     "f3dfa8e8dc3945baa1e8aa49716b72fa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
